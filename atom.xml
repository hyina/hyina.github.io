<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hyinaのブログヾ(o・ω・o)ﾉ]]></title>
  <link href="http://hyina.github.io/atom.xml" rel="self"/>
  <link href="http://hyina.github.io/"/>
  <updated>2014-01-14T02:23:08+09:00</updated>
  <id>http://hyina.github.io/</id>
  <author>
    <name><![CDATA[hyina]]></name>
    <email><![CDATA[muffin.nov20@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hibernateSessionFactory]]></title>
    <link href="http://hyina.github.io/blog/2014/01/14/hibernatesessionfactory/"/>
    <updated>2014-01-14T02:01:00+09:00</updated>
    <id>http://hyina.github.io/blog/2014/01/14/hibernatesessionfactory</id>
    <content type="html"><![CDATA[<h3>SessionFactoryをシングルトン化する</h3>

<p>データ永続化のPOJOは作成しているものとする。<br/>
ここでそれぞれのDAOにはいくつか共通するコードが出てくる。<br/>
特にセッション取得やクローズを毎回記述するのは面倒ですので、以下のようにDAOの基底クラスを作成し、
共通メソッドを定義します。</p>

<!-- more -->


<p>セッションファクトリ管理クラス：SessionManager.java<br/>
基底クラス                 ：BaseDAO.java<br/>
個別DAO                   ：それぞれ</p>

<p>セッションファクトリ管理クラス</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.hibernate.HibernateException;
</span><span class='line'>import org.hibernate.Session;
</span><span class='line'>import org.hibernate.SessionFactory;
</span><span class='line'>import org.hibernate.cfg.Configuration;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * HibernateのSessionFactoryを保持するシングルトン
</span><span class='line'> */
</span><span class='line'>public class SessionManager {
</span><span class='line'>    private static SessionManager instance;
</span><span class='line'>
</span><span class='line'>    private SessionFactory sessions;
</span><span class='line'>
</span><span class='line'>    private SessionManager() throws HibernateException {
</span><span class='line'>      Configuration configuration = new Configuration();
</span><span class='line'>      sessions = configuration.configure().buildSessionFactory();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public static synchronized SessionManager getInstance() {
</span><span class='line'>        if (instance == null) throw new NotInitializedException();
</span><span class='line'>        return instance;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * SessionFactoryを初期化する。
</span><span class='line'>     * getInstance()を呼び出す前に必ず一度呼び出す必要がある。
</span><span class='line'>     * @throws HibernateException
</span><span class='line'>     */
</span><span class='line'>    public static synchronized void initialize() throws HibernateException {
</span><span class='line'>        if (instance == null)
</span><span class='line'>            instance = new SessionManager();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public Session getSession() throws HibernateException {
</span><span class='line'>        return sessions.openSession();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public static class NotInitializedException extends RuntimeException {}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>基底クラス</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.hibernate.HibernateException;
</span><span class='line'>import org.hibernate.Session;
</span><span class='line'>import org.hibernate.Transaction;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * 各DAOにSession取得のための簡易メソッドを提供する基底クラス。
</span><span class='line'> */
</span><span class='line'>public class BaseDAO {
</span><span class='line'>    protected SessionManager manager;
</span><span class='line'>    
</span><span class='line'>    public BaseDAO() {
</span><span class='line'>      //セッションマネージャー初期処理
</span><span class='line'>      SessionManager.initialize();
</span><span class='line'>      manager = SessionManager.getInstance();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    /** 
</span><span class='line'>     * HibernateのSessionを取得する
</span><span class='line'>     * @return
</span><span class='line'>     * @throws HibernateException
</span><span class='line'>     */
</span><span class='line'>    public Session getSession() throws HibernateException {
</span><span class='line'>        return manager.getSession();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    /** 
</span><span class='line'>     * トランザクションのロールバックを行う
</span><span class='line'>     * @param session
</span><span class='line'>     */
</span><span class='line'>    public void rollback(Transaction tr) {
</span><span class='line'>        try {
</span><span class='line'>            tr.rollback();
</span><span class='line'>        } catch (HibernateException ignore) {}
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    /**
</span><span class='line'>     * HibernateのSessionを閉じる
</span><span class='line'>     */
</span><span class='line'>    public void closeSession(Session session) {
</span><span class='line'>        if (session != null) {
</span><span class='line'>            try {
</span><span class='line'>                session.close();
</span><span class='line'>            } catch (HibernateException ignore) {}
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>個別DAO</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package test.dao;
</span><span class='line'>
</span><span class='line'>import java.util.List;
</span><span class='line'>
</span><span class='line'>import org.hibernate.HibernateException;
</span><span class='line'>import org.hibernate.Query;
</span><span class='line'>import org.hibernate.Session;
</span><span class='line'>import org.hibernate.Transaction;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Testテーブルへのアクセスを行うDAO
</span><span class='line'> */
</span><span class='line'>public class sampleDao extends BaseDAO {
</span><span class='line'>    
</span><span class='line'>      /**
</span><span class='line'>       * データベースへオブジェクトをinsertする
</span><span class='line'>       */
</span><span class='line'>      public void save(Test obj) throws HibernateException {
</span><span class='line'>          Session sess = getSession();
</span><span class='line'>          Transaction tx = null;
</span><span class='line'>          try {
</span><span class='line'>              tx = sess.beginTransaction();
</span><span class='line'>              sess.save(obj);
</span><span class='line'>              tx.commit();
</span><span class='line'>          } catch (HibernateException ex) {
</span><span class='line'>              rollback(tx);
</span><span class='line'>              throw ex;
</span><span class='line'>          } finally {
</span><span class='line'>              closeSession(sess);
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      /**
</span><span class='line'>       * データベース内のオブジェクトを更新する
</span><span class='line'>       */
</span><span class='line'>      public void update(Test obj) throws HibernateException {
</span><span class='line'>          Session sess = getSession();
</span><span class='line'>          Transaction tx = null;
</span><span class='line'>          try {
</span><span class='line'>              tx = sess.beginTransaction();
</span><span class='line'>              sess.update(obj);
</span><span class='line'>              tx.commit();
</span><span class='line'>          } catch (HibernateException ex) {
</span><span class='line'>              rollback(tx);
</span><span class='line'>              throw ex;
</span><span class='line'>          } finally {
</span><span class='line'>              closeSession(sess);
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      /**
</span><span class='line'>       * 引数で指定した主キー値にマッチするTestオブジェクトを取得する
</span><span class='line'>       * @param id 複合主キークラス
</span><span class='line'>       */
</span><span class='line'>      public Test load(test.dao.TestId id) throws HibernateException {
</span><span class='line'>          Test user = null;
</span><span class='line'>          Session sess = getSession();
</span><span class='line'>          try {
</span><span class='line'>              user = (Test) sess.get("test.dao.Test", id);
</span><span class='line'>          } finally {
</span><span class='line'>              closeSession(sess);
</span><span class='line'>          }
</span><span class='line'>          return user;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      /**
</span><span class='line'>       * 引数にマッチする名前を持つTestオブジェクトのリストを取得する
</span><span class='line'>       */
</span><span class='line'>      public List&lt;Test&gt; findByName(String name) throws HibernateException {
</span><span class='line'>          List&lt;Test&gt; test = null;
</span><span class='line'>          Session sess = getSession();
</span><span class='line'>          
</span><span class='line'>          //HQL文  
</span><span class='line'>          String hql = "FROM test.dao.Test as test WHERE test.name = :name";  
</span><span class='line'>          
</span><span class='line'>          try {
</span><span class='line'>              Query query = sess.createQuery(hql);  
</span><span class='line'>            
</span><span class='line'>              //条件          
</span><span class='line'>              query.setString("name", new String(name));  
</span><span class='line'>                
</span><span class='line'>              //クエリ発行
</span><span class='line'>              test = (List&lt;Test&gt;) query.list();
</span><span class='line'>          } finally {
</span><span class='line'>              closeSession(sess);
</span><span class='line'>          }
</span><span class='line'>          return test;
</span><span class='line'>      }
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>あとは呼び出すクラス</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.List;
</span><span class='line'>
</span><span class='line'>public class TestSample {
</span><span class='line'>
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      TestId id = new TestId(1,"admin");
</span><span class='line'>      System.out.println("Factoryをシングルトンにした場合");
</span><span class='line'>      sampleDao s = new sampleDao();
</span><span class='line'>      System.out.println("主キーによる検索結果");
</span><span class='line'>      System.out.println(s.load(id));
</span><span class='line'>      
</span><span class='line'>      System.out.println("nameによる検索");
</span><span class='line'>          
</span><span class='line'>      for (Test t : s.findByName("てすと１")) {
</span><span class='line'>          System.out.print(t.getId().getId() + " ");
</span><span class='line'>          System.out.print(t.getId().getUserid() + " ");
</span><span class='line'>          System.out.println(t.getName());
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>      System.out.println("主キーの一部による検索");
</span><span class='line'>      for (Test t : s.findByUserId("admin")) {
</span><span class='line'>          System.out.print(t.getId().getId() + " ");
</span><span class='line'>          System.out.print(t.getId().getUserid() + " ");
</span><span class='line'>          System.out.println(t.getName());
</span><span class='line'>      }
</span><span class='line'>  
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hibernateの設定周り＋α]]></title>
    <link href="http://hyina.github.io/blog/2014/01/13/hibernatesettings/"/>
    <updated>2014-01-13T20:26:00+09:00</updated>
    <id>http://hyina.github.io/blog/2014/01/13/hibernatesettings</id>
    <content type="html"><![CDATA[<h3>Hibernateの設定</h3>

<p>最低こんくらいあれば動くと思う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
</span><span class='line'>                                         "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;
</span><span class='line'>&lt;hibernate-configuration&gt;
</span><span class='line'>  &lt;session-factory name=""&gt;
</span><span class='line'>      &lt;!-- session contextの設定 --&gt;
</span><span class='line'>      &lt;property name="current_session_context_class"&gt;thread&lt;/property&gt;
</span><span class='line'>      &lt;!-- DBのドライバ --&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.driver_class"&gt;org.gjt.mm.mysql.Driver&lt;/property&gt;
</span><span class='line'>      &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
</span><span class='line'>      &lt;!-- DBのユーザ・パスワード --&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.username"&gt;　&lt;/property&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.password"&gt;　&lt;/property&gt;
</span><span class='line'>      &lt;!-- 接続するDBのURL --&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://localhost:3306/〜&lt;/property&gt;
</span><span class='line'>      &lt;!-- コネクションプールの設定 --&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.pool_size"&gt;3&lt;/property&gt;
</span><span class='line'>      &lt;!-- 実行SQLをコンソールに表示するか（true:表示、false:非表示） --&gt;
</span><span class='line'>      &lt;property name="hibernate.show_sql"&gt;true&lt;/property&gt;
</span><span class='line'>      &lt;!-- マッピングファイルの定義 --&gt;
</span><span class='line'>      &lt;!-- hibernateのxmlで管理する場合 --&gt;
</span><span class='line'>      &lt;mapping resource="src以下のディレクトリ/〜/〜.hbm.xml" /&gt;
</span><span class='line'>      &lt;!-- アノテーションで管理する場合 --&gt;
</span><span class='line'>      &lt;mapping class="パッケージ名.パッケージ名.クラス名" /&gt;
</span><span class='line'>  &lt;/session-factory&gt;
</span><span class='line'>&lt;/hibernate-configuration&gt;</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>Hibernateのセッション</h3>

<p><a href="http://www.yefisys.com/blog/2013/05/05/hibernate-will-be-no-backward-compat/">ここを参考</a>
buildServiceRegistry()が見つからないらしいので、build()に変更。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private final SessionFactory sessionFactory = getSessionFactory();
</span><span class='line'>private static ServiceRegistry serviceRegistry;
</span><span class='line'>
</span><span class='line'>protected SessionFactory getSessionFactory() {
</span><span class='line'>  try {
</span><span class='line'>      //デフォルトで作成されるやつ
</span><span class='line'>//            return (SessionFactory) new InitialContext()
</span><span class='line'>//                    .lookup("SessionFactory");
</span><span class='line'>      
</span><span class='line'>      //3とかで使える。5以降では削除される予定らしい。
</span><span class='line'>//            return new Configuration().configure().buildSessionFactory();
</span><span class='line'>      
</span><span class='line'>      // Hibernateの初期化処理（Sessionオブジェクトの取得）
</span><span class='line'>      // ※ Hibernate 4.0以降
</span><span class='line'>      Configuration config = new Configuration().configure();
</span><span class='line'>      serviceRegistry = new ServiceRegistryBuilder().applySettings(config.getProperties()).build();
</span><span class='line'>      return config.buildSessionFactory(serviceRegistry);
</span><span class='line'>  } catch (Exception e) {
</span><span class='line'>      throw new IllegalStateException(
</span><span class='line'>              "Could not locate SessionFactory in JNDI");
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private Session getSession() {
</span><span class='line'>  return  sessionFactory.openSession();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Hinerbate Toolsで作成したDAOについて。テーブル名+HOMEで作成される。<br/>
どうやらこのままだと使えないっぽい。なんかめんｄ(ry<br/>
daoSupportクラス。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.hibernate.HibernateException; 
</span><span class='line'>import org.hibernate.Session; 
</span><span class='line'>import org.hibernate.Transaction;
</span><span class='line'>import org.hibernate.SessionFactory;
</span><span class='line'>import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
</span><span class='line'>import org.hibernate.cfg.Configuration;
</span><span class='line'>import org.hibernate.service.ServiceRegistry;
</span><span class='line'>import org.hibernate.service.ServiceRegistryBuilder;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Dao を補助するクラス
</span><span class='line'> */
</span><span class='line'>public abstract class daoSupport {
</span><span class='line'>  private static SessionFactory factory;
</span><span class='line'>  private static ServiceRegistry serviceRegistry;
</span><span class='line'>  
</span><span class='line'>  protected Session getSession() {
</span><span class='line'>      try {
</span><span class='line'>          Configuration configuration = new Configuration();
</span><span class='line'>          return configuration.configure().buildSessionFactory().openSession();
</span><span class='line'>      } catch (Exception e) {
</span><span class='line'>          throw new IllegalStateException(
</span><span class='line'>                  "Could not locate SessionFactory in JNDI");
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>daoSupportクラスを継承して、daoを作成。<br/>
複合主キーの１部を使用して検索し、結果をListで返すだけ。</p>

<p>テスト用なので、下記な感じです。</p>

<ol>
<li>id   PK</li>
<li>userid   PK</li>
<li>name</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.List;
</span><span class='line'>
</span><span class='line'>import org.hibernate.Session;
</span><span class='line'>import org.hibernate.criterion.Restrictions;
</span><span class='line'>
</span><span class='line'>public class daoTest extends daoSupport {
</span><span class='line'>  @SuppressWarnings("unchecked")
</span><span class='line'>  public List&lt;Test&gt; findByUserId(String userId) {
</span><span class='line'>      try {
</span><span class='line'>          Session s = getSession();
</span><span class='line'>          try {
</span><span class='line'>              List&lt;Test&gt; results = (List&lt;Test&gt;) s.createCriteria(Test.class)　//←Entityクラスを指定
</span><span class='line'>                      .add( Restrictions.eq("id.userid", userId) )    //useridに一致する。カラム名はhibernateの関連付けで定義した名前
</span><span class='line'>//                        .add( Restrictions.like("name", "てすと%"))  //like検索
</span><span class='line'>//                        .add( Restrictions.between("id.id",new Integer(1), new Integer(4)))     //between検索。第２引数が開始、第３引数が終了
</span><span class='line'>                      .list();
</span><span class='line'>              return results;
</span><span class='line'>          } finally {
</span><span class='line'>              s.close();
</span><span class='line'>          }
</span><span class='line'>      } catch (RuntimeException re) {
</span><span class='line'>          throw re;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以下エンティティ。</p>

<p>Test.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import javax.persistence.AttributeOverride;
</span><span class='line'>import javax.persistence.AttributeOverrides;
</span><span class='line'>import javax.persistence.Column;
</span><span class='line'>import javax.persistence.EmbeddedId;
</span><span class='line'>import javax.persistence.Entity;
</span><span class='line'>import javax.persistence.Table;
</span><span class='line'>
</span><span class='line'>import org.apache.commons.lang3.builder.ToStringBuilder;
</span><span class='line'>import org.apache.commons.lang3.builder.ToStringStyle;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Test generated by hbm2java
</span><span class='line'> */
</span><span class='line'>@Entity
</span><span class='line'>@Table(name = "test", catalog = "todoSample")
</span><span class='line'>public class Test implements java.io.Serializable {
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * 
</span><span class='line'>   */
</span><span class='line'>  private static final long serialVersionUID = 1L;
</span><span class='line'>  private TestId id;
</span><span class='line'>  private String name;
</span><span class='line'>
</span><span class='line'>  public Test() {
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public Test(TestId id) {
</span><span class='line'>      this.id = id;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public Test(TestId id, String name) {
</span><span class='line'>      this.id = id;
</span><span class='line'>      this.name = name;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @EmbeddedId
</span><span class='line'>  @AttributeOverrides({
</span><span class='line'>          @AttributeOverride(name = "id", column = @Column(name = "id", nullable = false)),
</span><span class='line'>          @AttributeOverride(name = "userid", column = @Column(name = "userid", nullable = false, length = 45)) })
</span><span class='line'>  public TestId getId() {
</span><span class='line'>      return this.id;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setId(TestId id) {
</span><span class='line'>      this.id = id;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Column(name = "name", length = 45)
</span><span class='line'>  public String getName() {
</span><span class='line'>      return this.name;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setName(String name) {
</span><span class='line'>      this.name = name;
</span><span class='line'>  }
</span><span class='line'>  public String toString() {
</span><span class='line'>      return ToStringBuilder.reflectionToString(this,
</span><span class='line'>                ToStringStyle.SHORT_PREFIX_STYLE);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>TestId.java(複合主キー)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package test.dao;
</span><span class='line'>
</span><span class='line'>// Generated 2014/01/13 23:47:05 by Hibernate Tools 4.0.0
</span><span class='line'>
</span><span class='line'>import javax.persistence.Column;
</span><span class='line'>import javax.persistence.Embeddable;
</span><span class='line'>
</span><span class='line'>import org.apache.commons.lang3.builder.ToStringBuilder;
</span><span class='line'>import org.apache.commons.lang3.builder.ToStringStyle;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * TestId generated by hbm2java
</span><span class='line'> */
</span><span class='line'>@Embeddable
</span><span class='line'>public class TestId implements java.io.Serializable {
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * 
</span><span class='line'>   */
</span><span class='line'>  private static final long serialVersionUID = 1L;
</span><span class='line'>  private int id;
</span><span class='line'>  private String userid;
</span><span class='line'>
</span><span class='line'>  public TestId() {
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public TestId(int id, String userid) {
</span><span class='line'>      this.id = id;
</span><span class='line'>      this.userid = userid;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Column(name = "id", nullable = false)
</span><span class='line'>  public int getId() {
</span><span class='line'>      return this.id;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setId(int id) {
</span><span class='line'>      this.id = id;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Column(name = "userid", nullable = false, length = 45)
</span><span class='line'>  public String getUserid() {
</span><span class='line'>      return this.userid;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setUserid(String userid) {
</span><span class='line'>      this.userid = userid;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public boolean equals(Object other) {
</span><span class='line'>      if ((this == other))
</span><span class='line'>          return true;
</span><span class='line'>      if ((other == null))
</span><span class='line'>          return false;
</span><span class='line'>      if (!(other instanceof TestId))
</span><span class='line'>          return false;
</span><span class='line'>      TestId castOther = (TestId) other;
</span><span class='line'>
</span><span class='line'>      return (this.getId() == castOther.getId())
</span><span class='line'>              && ((this.getUserid() == castOther.getUserid()) || (this
</span><span class='line'>                      .getUserid() != null && castOther.getUserid() != null && this
</span><span class='line'>                      .getUserid().equals(castOther.getUserid())));
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public int hashCode() {
</span><span class='line'>      int result = 17;
</span><span class='line'>
</span><span class='line'>      result = 37 * result + this.getId();
</span><span class='line'>      result = 37 * result
</span><span class='line'>              + (getUserid() == null ? 0 : this.getUserid().hashCode());
</span><span class='line'>      return result;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String toString() {
</span><span class='line'>      return ToStringBuilder.reflectionToString(this,
</span><span class='line'>                ToStringStyle.SHORT_PREFIX_STYLE);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HeadFirstオブジェクト指向分析設計を読んだ時のメモ]]></title>
    <link href="http://hyina.github.io/blog/2013/12/31/headfirst-object-oriented-analysis-and-design/"/>
    <updated>2013-12-31T15:01:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/12/31/headfirst-object-oriented-analysis-and-design</id>
    <content type="html"><![CDATA[<h2>Head First オブジェクト指向分析設計のメモ</h2>

<p>「Head First オブジェクト指向分析」を読んで理解出来ていなかったところや、大事そうなところをメモしていく。<br/>
今後のために…。</p>

<h2>オブジェクト指向分析設計とは</h2>

<p>実際にはコードに必要な処理を行わせること、そしてその設計をよくすることに特化したソフトウェア作成手法にすぎない。<br/>
つまり、柔軟で、変更が容易であり、保守と再利用が可能であるコードを作成するための方法。</p>

<!-- more -->


<h2>１章 よく設計されたアプリケーションは心を動かす</h2>

<h3>素晴らしいソフトウェアとは？</h3>

<ul>
<li>[オブジェクト指向のプログラマ]オブジェクト指向のコード。つまり、コードの重複がなく、各オブジェクトの振る舞いが的確に制御されている。設計が堅実かつ柔軟なので、拡張も容易。</li>
<li>[設計の達人]実証されたデザインパターンと原則が使用されたときに生じる。オブジェクト間の結合を疎に保ち、コードは拡張に開かれ、修正に閉じるようにする。コードの再利用が容易になり、アプリケーションの一部を何度も使い回せるから、すべてを作り直す必要がなくなる。</li>
<li>第一に顧客を満足させ、顧客が望む処理を実行する必要がある。第二に設計やコードが適切で、保守、再利用、拡張が容易である。</li>
</ul>


<h3>素晴らしいソフトウェアにするための３ステップ</h3>

<ol>
<li>処理をソフトウェアが実行するようにする

<ul>
<li>良い要件収集と分析が必要</li>
</ul>
</li>
<li>オブジェクト指向の基本原則を適用し、柔軟性を高める

<ul>
<li>重複するコードを見つけ取り除く。そして、良いオブジェクト指向プログラミング技法を活用</li>
</ul>
</li>
<li>保守と再利用が可能な設計を追求する

<ul>
<li>処理の最適なオブジェクト指向アプリケーションが完成したら、パターンと原則を適用して、ソフトウェアが今後数年間使用可能である状態にする</li>
</ul>
</li>
</ol>


<h3>カプセル化</h3>

<p>アプリケーションを論理的な部分に分割して、それぞれを別々に扱えるようにすること。<br/>
結成を改善できる箇所を探すのは、カプセル化から行う。継承やポリモーフィズムは、どちらもコードの重複とカプセル化に関するため、カプセル化から行うと良い。</p>

<p>オブジェクトで何ができるかの仕様を、オブジェクトがその目標を達成ｓるうために行う実際の実装から、分離することである</p>

<ol>
<li>カプセル化により、アプリケーションの各部分の内部動作は隠蔽されるが、各部分の実行内容は明確になる！</li>
<li>目的の１つは、アプリケーションの一部にある情報を、他の部分から保護すること。</li>
<li>クラスから振る舞いを分離すれば、クラスを変更しなくても、振る舞いを変更することが可能。</li>
<li>一般的に、アプリケーション内で変動する部分を、同じ状態にとどまり続ける他の部分と分離して、カプセル化すべき。</li>
</ol>


<h3>委譲</h3>

<p>あるオブジェクトが、操作を他のオブジェクトに転送し、代わりに実行してもらう行為。<br/>
委譲により、コードの再利用が容易になる。あるオブジェクトの振る舞いを処理するコードがアプリケーション全体に広まってしまうことがなくなり、オブジェクトは自分の機能だけを処理すれば良くなります。<br/>
(例)equals()メソッドが一般的な例</p>

<p>委譲により各オブジェクトは等価性（あるいはその他の仕事）を自分で処理するようになります。つまり、オブジェクト間の独立性が増し、疎結合(※)となる。<br/>
疎結合のオブジェクトは、他のオブジェクトのコードと強く結合していないので、別のアプリケーションにおいて容易に再利用することが出来る。<br/>
※疎結合：アプリケーション内のオブジェクトが自分の仕事だけに専念している状態。機能は、良く設計された多くのオブジェクトによって実現されるが、各オブジェクトは１つの仕事だけを的確に行う。<br/>
なぜそれが良いのか？<br/>
→疎結合のアプリケーションは、通常柔軟で、変更が容易である。各オブジェクトは、他のオブジェクトからかなり独立しているので、別のオブジェクトの振る舞いを変更することができる。
その結果、新しいフィーチャや機能の追加がはるかに容易になる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts2とHibernate4を使ってTodoアプリをつくろう その１]]></title>
    <link href="http://hyina.github.io/blog/2013/12/22/struts-hibernate-login/"/>
    <updated>2013-12-22T23:35:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/12/22/struts-hibernate-login</id>
    <content type="html"><![CDATA[<h3>事の始まり</h3>

<p>12月半ばにとあるプロジェクトにアサインされた。どうやら新規開発らしい。<br/>
開発案件から遠ざかっていたし、２年ほどいた職場で病んでいた精神も薬とかカウンセリングとかで
やっとこさマシな状況まで回復してきたので、開発に復活するにはちょうど良さそうなタイミングだった。<br/>
2年半ほど、(なんちゃって)運用系な作業をやっていたので、開発は2年半ぶりｗ<br/>
いやー楽しみですわー</p>

<p>MVCはStruts2で、O/RMapperはHibernate使うから勉強しといて！！</p>

<!-- more -->


<h4>どっちも触ったことねーーー(´・ω・｀)</h4>

<p>Struts1.x系はちょろっと改修するときに見たことある程度だったので、マジ初心者。<br/>
Hibernate？名前しか知りませんがなにか？←<br/>
という残念っぷり。。。<br/>
というわけで、勉強も兼ねて、Struts2.x系とHibernate4.x系使ってTODOアプリでも作ってみるかー。</p>

<p>眠いのでまとめるのはまた今度ちゃんとやる。</p>

<h1>限りなく自分用のメモです。</h1>

<h3>環境</h3>

<ol>
<li>MacBookAir</li>
<li>Mysql5.6</li>
<li>Struts2.3.16</li>
<li>Hibernate4.3.0</li>
<li>Tomcat7.0.47</li>
<li>Eclipse kepler

<ul>
<li>Tomcatプラグイン3.3</li>
<li>Hibernate Tools

<ul>
<li>Hibernate Toolsは、Eclipseで<code>http://download.jboss.org/jbosstools/updates/stable/kepler/</code>を指定して、「Hibernate Tools」でフィルター後、複数出てくるが１番上のを入れてみた</li>
</ul>
</li>
</ul>
</li>
</ol>


<h3>Strutsの設定周り</h3>

<p>web.xml
filter-classへの指定がどっかのバージョンから変わったらしい。。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;web-app id="WebApp_9" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" 
</span><span class='line'> xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
</span><span class='line'> xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;display-name&gt;Struts Todo&lt;/display-name&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;filter&gt;
</span><span class='line'>        &lt;filter-name&gt;struts2&lt;/filter-name&gt;
</span><span class='line'>        &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;
</span><span class='line'>    &lt;/filter&gt;
</span><span class='line'>
</span><span class='line'>    &lt;filter-mapping&gt;
</span><span class='line'>        &lt;filter-name&gt;struts2&lt;/filter-name&gt;
</span><span class='line'>        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</span><span class='line'>    &lt;/filter-mapping&gt;
</span><span class='line'>
</span><span class='line'>    &lt;welcome-file-list&gt;
</span><span class='line'>        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
</span><span class='line'>    &lt;/welcome-file-list&gt;
</span><span class='line'>
</span><span class='line'>&lt;/web-app&gt;</span></code></pre></td></tr></table></div></figure>


<p>struts.xml
ここら辺は特に変化はないはず。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
</span><span class='line'>&lt;!DOCTYPE struts PUBLIC
</span><span class='line'>  "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
</span><span class='line'>  "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;
</span><span class='line'>
</span><span class='line'>&lt;struts&gt;
</span><span class='line'>    &lt;package name="StrutsTodoProject" extends="struts-default"&gt;
</span><span class='line'>
</span><span class='line'>        &lt;action name="Login" class="todo.Login"&gt;
</span><span class='line'>            &lt;result name="success"&gt;ぺーじ&lt;/result&gt;
</span><span class='line'>        &lt;/action&gt;
</span><span class='line'>
</span><span class='line'>        &lt;action name="LoginConfirm" method="confirm" class="todo.Login"&gt;
</span><span class='line'>            &lt;result name="success"&gt;ぺーじ&lt;/result&gt;
</span><span class='line'>            &lt;result name="error"&gt;ぺーじ&lt;/result&gt;
</span><span class='line'>            &lt;result name="input"&gt;ぺーじ&lt;/result&gt;
</span><span class='line'>        &lt;/action&gt;
</span><span class='line'>    &lt;/package&gt;
</span><span class='line'>&lt;/struts&gt;</span></code></pre></td></tr></table></div></figure>


<p>あとは、formのとこでなぜか詰まってしまった。。。<br/>
formのactionには、struts.xmlのactionタグのnameを書く。<br/>
参考にしてたサイトがsubmitのとこに入れてたので、動かんくて困った。。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;body&gt;
</span><span class='line'>  &lt;s:form action="LoginConfirm" validate="true"&gt;
</span><span class='line'>      &lt;s:textfield label="〜" name="xxxx" /&gt;
</span><span class='line'>      &lt;s:password label="〜" name="yyyy" /&gt;
</span><span class='line'>      &lt;s:submit value="ボタン" /&gt;
</span><span class='line'>  &lt;/s:form&gt;
</span><span class='line'>&lt;/body&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Hibernate</h3>

<p>ここを参考に<a href="http://www.omotenashi-mind.com/index.php/Hibernate_Tools%E3%81%A7%E7%B0%A1%E5%8D%98Hibernate%E6%B4%BB%E7%94%A8">HibernateToolsで簡単Hibernate活用</a>ツールのインストール。<br/>
Hibernate Reverse Engineering File以降は、テーブルを作ってからやる（当然）。</p>

<p>hibernate.cfg.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
</span><span class='line'>                                         "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;
</span><span class='line'>&lt;hibernate-configuration&gt;
</span><span class='line'>  &lt;session-factory name=""&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.driver_class"&gt;org.gjt.mm.mysql.Driver&lt;/property&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://localhost:3306/でーびー&lt;/property&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.username"&gt;ゆーざー&lt;/property&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.password"&gt;ぱすわーど&lt;/property&gt;
</span><span class='line'>      &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
</span><span class='line'>      &lt;property name="hibernate.connection.pool_size"&gt;3&lt;/property&gt;
</span><span class='line'>      &lt;property name="hibernate.current_session_context_class"&gt;thread&lt;/property&gt;
</span><span class='line'>      &lt;property name="hibernate.show_sql"&gt;true&lt;/property&gt;
</span><span class='line'>      &lt;!-- Mapping files --&gt;
</span><span class='line'>      &lt;mapping  resource="まっぴんぐふぁいるのありか" /&gt;
</span><span class='line'>  &lt;/session-factory&gt;
</span><span class='line'>&lt;/hibernate-configuration&gt;</span></code></pre></td></tr></table></div></figure>


<p>HibernateToolsで作成したDAO(一部修正)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Home object for domain model class TodoUser.
</span><span class='line'> * @see todo.hibernate.TodoUser
</span><span class='line'> * @author Hibernate Tools
</span><span class='line'> */
</span><span class='line'>public class TodoUserHome {
</span><span class='line'>
</span><span class='line'>  private static final Log log = LogFactory.getLog(TodoUserHome.class);
</span><span class='line'>  private SessionFactory sessionFactory;
</span><span class='line'>  
</span><span class='line'>  public TodoUserHome() {
</span><span class='line'>      HibernateUtil h = new HibernateUtil();
</span><span class='line'>      sessionFactory = h.getSessionFactory();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>    /** 
</span><span class='line'>     * セッションを取得する 
</span><span class='line'>     * @return Session 
</span><span class='line'>     */
</span><span class='line'>    // TODO 共通化すること 
</span><span class='line'>    private Session getSession() {  
</span><span class='line'>      Session session = sessionFactory.getCurrentSession();
</span><span class='line'>        session.beginTransaction();
</span><span class='line'>        return session;  
</span><span class='line'>    } 
</span><span class='line'>    
</span><span class='line'>  /**
</span><span class='line'>   * 
</span><span class='line'>   * @param transientInstance
</span><span class='line'>   */
</span><span class='line'>  public void persist(TodoUser transientInstance) {
</span><span class='line'>      log.debug("persisting TodoUser instance");
</span><span class='line'>      try {
</span><span class='line'>          Session s = getSession();
</span><span class='line'>          s.persist(transientInstance);
</span><span class='line'>          log.debug("persist successful");
</span><span class='line'>      } catch (RuntimeException re) {
</span><span class='line'>          log.error("persist failed", re);
</span><span class='line'>          throw re;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * 登録or更新
</span><span class='line'>   * @param instance
</span><span class='line'>   */
</span><span class='line'>  public void attachDirty(TodoUser instance) {
</span><span class='line'>      log.debug("attaching dirty TodoUser instance");
</span><span class='line'>      try {
</span><span class='line'>          Session s = getSession();
</span><span class='line'>          s.saveOrUpdate(instance);
</span><span class='line'>          s.getTransaction().commit();
</span><span class='line'>          log.debug("attach successful");
</span><span class='line'>      } catch (RuntimeException re) {
</span><span class='line'>          log.error("attach failed", re);
</span><span class='line'>          throw re;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * 
</span><span class='line'>   * @param instance
</span><span class='line'>   */
</span><span class='line'>  public void attachClean(TodoUser instance) {
</span><span class='line'>      log.debug("attaching clean TodoUser instance");
</span><span class='line'>      try {
</span><span class='line'>          Session s = getSession();
</span><span class='line'>          s.lock(instance, LockMode.NONE);
</span><span class='line'>          log.debug("attach successful");
</span><span class='line'>      } catch (RuntimeException re) {
</span><span class='line'>          log.error("attach failed", re);
</span><span class='line'>          throw re;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * 削除
</span><span class='line'>   * @param persistentInstance
</span><span class='line'>   */
</span><span class='line'>  public void delete(TodoUser persistentInstance) {
</span><span class='line'>      log.debug("deleting TodoUser instance");
</span><span class='line'>      try {
</span><span class='line'>          Session s = getSession();
</span><span class='line'>          s.delete(persistentInstance);
</span><span class='line'>          s.getTransaction().commit();
</span><span class='line'>          log.debug("delete successful");
</span><span class='line'>      } catch (RuntimeException re) {
</span><span class='line'>          log.error("delete failed", re);
</span><span class='line'>          throw re;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * 登録処理
</span><span class='line'>   * @param instance
</span><span class='line'>   */
</span><span class='line'>  public void save(TodoUser instance) {
</span><span class='line'>      log.debug("Save TodoUser instance");
</span><span class='line'>      try {
</span><span class='line'>          Session s = getSession();
</span><span class='line'>          s.save(instance);
</span><span class='line'>          s.getTransaction().commit();
</span><span class='line'>          log.debug("save successful");
</span><span class='line'>      } catch (RuntimeException re) {
</span><span class='line'>          log.error("save failed", re);
</span><span class='line'>          throw re;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  public TodoUser merge(TodoUser detachedInstance) {
</span><span class='line'>      log.debug("merging TodoUser instance");
</span><span class='line'>      try {
</span><span class='line'>          TodoUser result = (TodoUser) sessionFactory.getCurrentSession()
</span><span class='line'>                  .merge(detachedInstance);
</span><span class='line'>          log.debug("merge successful");
</span><span class='line'>          return result;
</span><span class='line'>      } catch (RuntimeException re) {
</span><span class='line'>          log.error("merge failed", re);
</span><span class='line'>          throw re;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * IDによる検索
</span><span class='line'>   * @param id
</span><span class='line'>   * @return
</span><span class='line'>   */
</span><span class='line'>  public TodoUser findById(java.lang.Integer id) {
</span><span class='line'>      log.debug("getting TodoUser instance with id: " + id);
</span><span class='line'>      try {
</span><span class='line'>          Session session = sessionFactory.getCurrentSession();
</span><span class='line'>          session.beginTransaction();
</span><span class='line'>          TodoUser instance = (TodoUser) session.get("todo.hibernate.TodoUser", id);
</span><span class='line'>          if (instance == null) {
</span><span class='line'>              log.debug("get successful, no instance found");
</span><span class='line'>          } else {
</span><span class='line'>              log.debug("get successful, instance found");
</span><span class='line'>          }
</span><span class='line'>          return instance;
</span><span class='line'>      } catch (RuntimeException re) {
</span><span class='line'>          log.error("get failed", re);
</span><span class='line'>          throw re;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @SuppressWarnings("unchecked")
</span><span class='line'>  public List&lt;TodoUser&gt; findByExample(TodoUser instance) {
</span><span class='line'>      log.debug("finding TodoUser instance by example");
</span><span class='line'>      try {
</span><span class='line'>          List&lt;TodoUser&gt; results = (List&lt;TodoUser&gt;) sessionFactory
</span><span class='line'>                  .getCurrentSession()
</span><span class='line'>                  .createCriteria("todo.hibernate.TodoUser")
</span><span class='line'>                  .add(create(instance)).list();
</span><span class='line'>          log.debug("find by example successful, result size: "
</span><span class='line'>                  + results.size());
</span><span class='line'>          return results;
</span><span class='line'>      } catch (RuntimeException re) {
</span><span class='line'>          log.error("find by example failed", re);
</span><span class='line'>          throw re;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>    /** 
</span><span class='line'>     * TodoUserデータ検索（全件取得）
</span><span class='line'>     * @return TODOUSERの全件データ。 
</span><span class='line'>     */  
</span><span class='line'>    @SuppressWarnings("unchecked")
</span><span class='line'>  public List &lt;TodoUser&gt; getAllList() {  
</span><span class='line'>        return getSession().createCriteria(TodoUser.class).list();  
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** 
</span><span class='line'>     * HQL文より指定条件で合致するユーザのリストを取得する
</span><span class='line'>     * @param name ユーザ名
</span><span class='line'>     * @return 合致するユーザのリスト
</span><span class='line'>     */
</span><span class='line'>    @SuppressWarnings("unchecked")
</span><span class='line'>  public List &lt;TodoUser&gt; getListByNameHql(String name) {  
</span><span class='line'>        //HQL文  
</span><span class='line'>        String hql = "FROM todo.hibernate.TodoUser as u WHERE u.name = :name";  
</span><span class='line'>        Query query = getSession().createQuery(hql);  
</span><span class='line'>  
</span><span class='line'>        //条件          
</span><span class='line'>        query.setString("name", name);  
</span><span class='line'>          
</span><span class='line'>        //クエリ発行  
</span><span class='line'>        return query.list();  
</span><span class='line'>    }  
</span><span class='line'>   
</span><span class='line'>    /** 
</span><span class='line'>     * HQL文より指定条件で合致するユーザ名とパスワードのリストを取得する
</span><span class='line'>     * @param name ユーザ名
</span><span class='line'>     * @param password パスワード
</span><span class='line'>     * @return 合致するユーザのリスト
</span><span class='line'>     */   
</span><span class='line'>    @SuppressWarnings("unchecked")
</span><span class='line'>    public List &lt;TodoUser&gt; getListByNamePassowordHql(String name, String password) {  
</span><span class='line'>        //HQL文  
</span><span class='line'>        String hql = "FROM todo.hibernate.TodoUser as u WHERE u.name = :name AND u.password = :password";  
</span><span class='line'>        Query query = getSession().createQuery(hql);  
</span><span class='line'>  
</span><span class='line'>        //条件          
</span><span class='line'>        query.setString("name", name);  
</span><span class='line'>        query.setString("password", password);  
</span><span class='line'>
</span><span class='line'>        //クエリ発行  
</span><span class='line'>        return query.list();  
</span><span class='line'>    }  
</span><span class='line'>    
</span><span class='line'>    /** 
</span><span class='line'>     * SQL文より指定条件で合致するユーザのリストを取得する
</span><span class='line'>     * @param name ユーザ名 
</span><span class='line'>     * @return 合致するユーザのリスト 
</span><span class='line'>     */  
</span><span class='line'>    @SuppressWarnings("unchecked")
</span><span class='line'>  public List &lt;TodoUser&gt; getListByNameSql(String name) {  
</span><span class='line'>        //HQL文  
</span><span class='line'>        String sql = "FROM TODOUSER u WHERE u.NAME = :name";  
</span><span class='line'>        Query query = getSession().createSQLQuery(sql);  
</span><span class='line'>  
</span><span class='line'>        //条件          
</span><span class='line'>        query.setString("name", name);  
</span><span class='line'>          
</span><span class='line'>        //クエリ発行  
</span><span class='line'>        return query.list();  
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>HibernateUtil.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package todo.hibernate;
</span><span class='line'>
</span><span class='line'>import org.hibernate.SessionFactory;
</span><span class='line'>import org.hibernate.cfg.Configuration;
</span><span class='line'>
</span><span class='line'>public class HibernateUtil {
</span><span class='line'>
</span><span class='line'>    private final SessionFactory sessionFactory = buildSessionFactory();
</span><span class='line'>
</span><span class='line'>    @SuppressWarnings("deprecation")
</span><span class='line'>  private SessionFactory buildSessionFactory() {
</span><span class='line'>        try {
</span><span class='line'>            // Create the SessionFactory from hibernate.cfg.xml
</span><span class='line'>            return new Configuration().configure().buildSessionFactory();
</span><span class='line'>        }
</span><span class='line'>        catch (Throwable ex) {
</span><span class='line'>            // Make sure you log the exception, as it might be swallowed
</span><span class='line'>            System.err.println("Initial SessionFactory creation failed." + ex);
</span><span class='line'>            throw new ExceptionInInitializerError(ex);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public SessionFactory getSessionFactory() {
</span><span class='line'>        return sessionFactory;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>どうしてこうなった</h3>

<p>なぜかしょうもないとこ含め、色んなとこで詰まってしまった(´・ω・｀)<br/>
まぁ、これも経験ということで。やっぱり手を動かさないと覚えないもんだよねー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacAirが充電できない…]]></title>
    <link href="http://hyina.github.io/blog/2013/12/20/macair/"/>
    <updated>2013-12-20T23:57:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/12/20/macair</id>
    <content type="html"><![CDATA[<h2>寒さでMBAが凍える</h2>

<p>昨日から一気に冷えてきて、朝がツライ今日このごろ。<br/>
去年はそうでもなかったのに、最近愛用MacBookAirが充電出来ないことが多くなってきた。</p>

<p>2011モデルなので、最初はぶっ壊れたかと思ったが、調べてみると寒いと充電出来ないことよくあるらしい。<br/>
というわけで、その時の対処方法メモを書いておく。<br/>
主に自分のために(・∀・)</p>

<!-- more -->


<h3>部屋を暖める</h3>

<p>もうこれに尽きる！<br/>
といっても部屋がすぐに温まるわけでもない。。。<br/>
雰囲気的に、MBA本体よりMagsafe充電アダプタ本体を手とかこたつで温めると案外すぐに充電出来るようになる。<br/>
MBAのバッテリー、充電アダプタは両方動作温度は10~35℃なんだってさ。<br/>
自分のはこれでもいいけど、調べてたら他にも方法があるらしい。</p>

<h3>Magsafe充電アダプタを外して再接続する</h3>

<p>充電器をコンセントとMBAから外して1分以上待ってから再度接続する。<br/>
オンラインヘルプでも普通に出てくるらしい。<br/>
・・・効くのか？</p>

<h3>SMCをリセットする</h3>

<p>SMC=システム管理コントローラ<br/>
MBAのバッテリーや充電の電源管理は、SMCってとこがやっているらしいです。<br/>
このSMCが異常を起こして電源アダプタを正常に認識出来ていない（可能性）があって充電出来ないことがある・・・らしい。<br/>
方法は下記の通り。</p>

<ol>
<li>電源切る</li>
<li>電源コードを差し込む</li>
<li>Shift+Control+optionを押しながら電源ボタンを押す</li>
<li>全部のキーを離す→成功すると、電源アダプタが点灯する</li>
<li>電源ボタンオン！！</li>
</ol>


<p>いじょー</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrewでmysql5.6をインストールしてみる]]></title>
    <link href="http://hyina.github.io/blog/2013/12/19/mysql5-dot-6-install/"/>
    <updated>2013-12-19T19:09:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/12/19/mysql5-dot-6-install</id>
    <content type="html"><![CDATA[<h2>Mysqlのインストールめも</h2>

<hr />

<p>MacたんにインストールしてあったMysqlの調子が悪かったので、１から入れなおすことにしました。
HomebrewでMysql5.6をインストールした時のメモです。</p>

<!-- more -->


<h2>実施内容</h2>

<p>下記を順番に実行していく。</p>

<h3>Homebrewを最新の状態に更新する。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew update</span></code></pre></td></tr></table></div></figure>


<h3>最新のMysqlをインストールする。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install mysql</span></code></pre></td></tr></table></div></figure>


<p>インストール後、メッセージが表示されるが、下記のコマンドでいつでも確認可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew info mysql</span></code></pre></td></tr></table></div></figure>


<h3>データベースのインストールとオプションを設定する。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ unset TMPDIR
</span><span class='line'>$ mysql_install_db --verbose --user=`whoami` --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp</span></code></pre></td></tr></table></div></figure>


<h3>MySQLの設定を行うため、MySQLを起動する。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mysql.server start</span></code></pre></td></tr></table></div></figure>


<h3>rootのパスワードを変更する。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysqladmin -u root password 'new-password'</span></code></pre></td></tr></table></div></figure>


<h3>MySQLのセキュリティ向上（念のため）</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mysql_secure_installation</span></code></pre></td></tr></table></div></figure>


<p>基本デフォルトで良いと思う。
<em>rootパスワードの設定
</em>rootユーザのログインをlocalhostに制限
<em>anonymousユーザの削除
</em>testデータベースを削除</p>

<h3>my.cnfを配置する。</h3>

<p>my.cnfを配置後、カリカリと設定を書いていく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch /usr/local/etc/my.cnf</span></code></pre></td></tr></table></div></figure>


<p>また、my.cnfの読み込み順は下記コマンドで確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mysql --help | grep my.cnf</span></code></pre></td></tr></table></div></figure>


<p>いじょうー</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressはじめました]]></title>
    <link href="http://hyina.github.io/blog/2013/10/04/start-octopress/"/>
    <updated>2013-10-04T20:38:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/10/04/start-octopress</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>個人的なoctpressをはじめるためのメモ書きです。</p>

<h3>個人的環境</h3>

<hr />

<ul>
<li>Mac OS X Lion</li>
<li>ruby 2.0.0p247</li>
<li>git 1.8.4</li>
</ul>


<!-- more -->


<h3>導入</h3>

<hr />

<p><a href="http://octopress.org/docs/setup/">公式サイト</a>を見てコマンド実行するだけ。
rubyのバージョンは1.9.3以上が必要なので注意。
<code>.rbenv-version</code>ってファイルをイジると問題ないような気もする。やってないけど(笑´∀｀)<br/>
あとは、いつからか、githubのリポジトリをusername.github.com から username.github.io とするようになっているみたい。</p>

<p>デフォルトのテーマのままっていうのもあれなので、<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">サードパーティー制のテーマ</a>から、bootstrap-themeを適用しました。<br/>
下記のコマンドを実行でOK。テーマを適用するとサイドバーとかの修正した分の一部が初期化されるので、テーマを適用してからイジると良いかと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>git clone https://github.com/bkutil/bootstrap-theme .themes/bootstrap
</span><span class='line'>rake install['bootstrap']
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<h3>ブログの設定</h3>

<hr />

<p><em>config.ymlの編集すると、ブログタイトルなどは</em>config.ymlで設定できます。<br/>
titleやauthor等を編集すると、ヘッダーやフッターが自動的に変わってくれます。<br/>
内容については、ググるなり、<a href="http://octopress.org/docs/configuring/">公式サイト</a>を見ると色々書いてありますが、下記くらいは修正しておくと良いかと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>url: http://yoursite.com
</span><span class='line'>title: My Octopress Blog
</span><span class='line'>subtitle: A blogging framework for hackers.
</span><span class='line'>author: Yout Name
</span><span class='line'>simple_search: http://google.com/search
</span><span class='line'>description:
</span><span class='line'>date_format: "%Y-%m-%d" 
</span><span class='line'>excerpt_link: "続きを読む" </span></code></pre></td></tr></table></div></figure>


<p>あと、ブログなのにコメント欄がないというのもあれなので、ブログのコメントサービス<a href="http://disqus.com/">Disqus</a>を設定しときます。<br/>
Disqusでユーザ登録する際に、ユーザIDを設定できます、それを、<code>_config.yml</code>に追記します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#Dispus account
</span><span class='line'>disqus_short_name: USER_ID
</span><span class='line'>disqus_show_comment_count: false</span></code></pre></td></tr></table></div></figure>


<p>すると、<code>source/_include/disqus.html</code>によってdisqus用のコードを生成してくれます。</p>

<h3>プレビュー</h3>

<hr />

<p>ここらで一度、どんな感じになっているか確認してみます。<br/>
プレビューを行うには、下記のコマンドを実行後、<a href="http://localhost:4000">localhost:4000</a>にアクセスします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake preview</span></code></pre></td></tr></table></div></figure>


<p>
プレビューを終了するには、ctrl+cでｗ</p>

<h3>デプロイ</h3>

<hr />

<p>OctopressをGithub Pagesにデプロイするための設定をします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>
コマンドを叩くと、Github PagesのリポジトリのURLを入力してねと出るので、
リポジトリのURLを入力しましょう。</p>

<p>入力したら、下記コマンドを入力するとデプロイできます。しばらくすると、<code>http://username.github.io</code>にブログができあがります。反映には5〜10分くらいかかるみたいです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>記事の作成</h3>

<hr />

<p>記事を作成するには、下記のコマンドを実行し、テンプレートを作成します。<br/>
post titleは、実際のURLになるので、注意。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post['post title']</span></code></pre></td></tr></table></div></figure>


<p>テンプレートは、<code>source/_posts/</code>以下に出来るので、お好みのエディタで編集します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "ここにタイトルを記入"
</span><span class='line'>date: 作成日が入っています。
</span><span class='line'>comments: コメント欄を出す場合は、trueに。
</span><span class='line'>categories: "タグ"（複数入れる場合は、["タグ１","タグ２"]みたいにする）
</span><span class='line'>---
</span><span class='line'>記事を書く。
</span><span class='line'>下記を入れておくと、トップページではmore以下が省略され、続きを読むリンクが表示されます。
</span><span class='line'>リンク文字列は、_config.yml の excerpt_link で変更可能です。
</span><span class='line'>
</span><span class='line'># 上の内容までがトップページに表示 #
</span><span class='line'>&lt;!-- more --&gt;
</span><span class='line'># 下の内容が個別の記事のページに表示 #
</span></code></pre></td></tr></table></div></figure>


<p>Markdownで書いたものをリアルプレビューできるMouが有名みたいですが、僕は、Sublime Text 2で書いています。意味は特にないですｗ</p>

<h3>Sublime Text 2でMarkdownのプレビューをする</h3>

<hr />

<p>需要があるかは不明ですが、忘却メモということで(・∀・)<br/>
1. Ctrl + Shift + p<br/>
2. Package Controll:Install Packages</p>

<p>その後、「Markdown Preview」をインストールしたら使えます。<br/>
<a href="https://github.com/revolunet/sublimetext-markdown-preview#usage-">ここ</a>に使い方は書いてあるけど、Markdownのファイルを開いた状態で、</p>

<ol>
<li>Ctrl+Shift+p</li>
<li>Markdown Preview : preview in Browser</li>
</ol>


<p>と実行すると、ブラウザで開かれてプレビューを見ることができます。
<code>/var/folders/</code>にファイルが作成されてるみたい…勝手に削除されるのかな？</p>

<h3>htmlファイル生成</h3>

<hr />

<p>下記のコマンドを実行すると、htmlファイルが生成されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>そのあとは、プレビューで確認して、最終確認をします。</p>

<h3>記事の投稿</h3>

<hr />

<p>プレビューで公開をしても問題ないとなったら、下記のコマンドを実行してデプロイします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>ちなみに、html生成＋デプロイは、下記のコマンド１行でいけます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake gen_deloy</span></code></pre></td></tr></table></div></figure>


<p>あと、記事の削除は、<code>source/_posts/〜.markdown</code>を削除し、html生成+デプロイをすると、ブログからは消え去ります。</p>

<h3>感想</h3>

<hr />

<p>rubyを触ったことないからインストールから始めたので意外と時間はかかっちゃいました。あとは、テーマやらサイドバーとかの修正で手間取ったりorz<br/>
とりあえず、markdownでブログを書けるのはかなり楽なのでやって損はないと思います。<br/>
問題は、ブログを書き続ける継続力があるかどうか・・・かな(；・∀・)←</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近よく思うこと]]></title>
    <link href="http://hyina.github.io/blog/2013/09/29/recently-thinking/"/>
    <updated>2013-09-29T19:15:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/09/29/recently-thinking</id>
    <content type="html"><![CDATA[<h3>最近あったこと</h3>

<p>2年ほどいた職場から撤退した。</p>

<p>振り返ってみると・・・ただ単に作業量が多くて時間が消費されていたイメージ。
まだ、１ヶ月も立っていないけど、会社ではコードを触る機会を全然与えてくれず、今は・・・お察しな感じ(´・ω・｀)</p>

<!-- more -->


<p></p>

<hr />

<h3>最近の刺激的なこと</h3>

<p>友人からの紹介を得て、とある企業にお邪魔してきた。</p>

<p>その手の業界では普通なことなんだろうけど、SIerにいるうちには絶対に出来ないようなことを日常に取り込んでいて、とても楽しそうだった。
問題は、その企業の主力戦力の言語をほぼ触れないことｗ</p>

<hr />

<h3>最近よく思うこと</h3>

<p>本当にこのままでいいのだろうか？
ということ(；´Д｀)</p>

<p>入社したときは特に思わなかったけど、最近自分の取り巻く現状に不満・・・とまでは行かないものの、矛盾？みたいなものを感じている。
このまま行くと、エンジニアとして終わる未来も…。</p>

<p>外から戻ってきたら出しやすいってのが大きいと思うが・・・作業的にも、誰にでも出来るような作業を振られていて、毎日全然楽しくない。
周りに技術に明るい人が少ないので、そういう話が出来る人が少ない・・・。
外部の勉強会に行くだけで、「おー！！すごいね！！」と言われる状況ｗ</p>

<p>かと言って転職する・・・には、圧倒的に技術力が不足している・・・という残念過ぎる状況(´；д；`)</p>

<hr />

<h3>最近ではないけど実は</h3>

<p>僕も今年でちゃっかり４年目になる。その間、開発はほぼほぼエンハンスのみ。
サーバーリプレースや保守・運用といった様々な作業をさせてもらえたのは、とても自分のためになったと思っている。</p>

<p>でも、このまま行くとどんどん潰しの利かないエンジニアになる・・・と友人にも言われたが、自分でもそう思っているｱﾀヽ(д｀ヽ彡ノ´д)ノﾌﾀ</p>

<hr />

<h3>最近考えていることの結果</h3>

<p>色々悩んでいるけど、結局このまま行っても不満が積もるばかりな気がする。</p>

<p>技術的にしょっぱいなら、勉強してコード書けばいいだけだし、外の話も色々聞きたい。</p>

<p>転職エージェントに登録しますかー。とりあえず、職務経歴書でも書いてみますか！！ヾ(o・ω・o)ﾉﾞ</p>

<p>まぁそんな感じのことを毎日考えている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログを立ち上げてみたよ]]></title>
    <link href="http://hyina.github.io/blog/2013/09/15/start-blog/"/>
    <updated>2013-09-15T00:36:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/09/15/start-blog</id>
    <content type="html"><![CDATA[<p>入社して４年目。半分以上はとある場所で保守運用な作業ばっかりで、本当にこのままで良いのかと切羽詰まっていたときにやっとこさ、開発に戻れたヾ(o・ω・o)ﾉﾞ<br/>
でも、技術的にこのままで良いのかと悶々しつつ…自分の力量の無さにびっくり。<br/>
とりあえず、前々からのタスクだったブログを立ち上げてみようと思ったとです。</p>

<p>まぁ、そんな感じで何かしら書いていけたら良いなぁと思ってます((( ﾉ∀｀*)</p>
]]></content>
  </entry>
  
</feed>
