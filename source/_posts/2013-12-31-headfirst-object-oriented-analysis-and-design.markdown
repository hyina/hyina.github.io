---
layout: post
title: "HeadFirstオブジェクト指向分析設計を読んだ時のメモ"
date: 2013-12-31 15:01
comments: true
categories: ["勉強","オブジェクト指向"]
---
##Head First オブジェクト指向分析設計のメモ
「Head First オブジェクト指向分析」を読んで理解出来ていなかったところや、大事そうなところをメモしていく。  
今後のために…。  
  
##オブジェクト指向分析設計とは
実際にはコードに必要な処理を行わせること、そしてその設計をよくすることに特化したソフトウェア作成手法にすぎない。  
つまり、柔軟で、変更が容易であり、保守と再利用が可能であるコードを作成するための方法。  
  
<!-- more -->
  
##１章 よく設計されたアプリケーションは心を動かす
  
###素晴らしいソフトウェアとは？

* [オブジェクト指向のプログラマ]オブジェクト指向のコード。つまり、コードの重複がなく、各オブジェクトの振る舞いが的確に制御されている。設計が堅実かつ柔軟なので、拡張も容易。
* [設計の達人]実証されたデザインパターンと原則が使用されたときに生じる。オブジェクト間の結合を疎に保ち、コードは拡張に開かれ、修正に閉じるようにする。コードの再利用が容易になり、アプリケーションの一部を何度も使い回せるから、すべてを作り直す必要がなくなる。
* 第一に顧客を満足させ、顧客が望む処理を実行する必要がある。第二に設計やコードが適切で、保守、再利用、拡張が容易である。

###素晴らしいソフトウェアにするための３ステップ

1. 処理をソフトウェアが実行するようにする
	* 良い要件収集と分析が必要
2. オブジェクト指向の基本原則を適用し、柔軟性を高める
	* 重複するコードを見つけ取り除く。そして、良いオブジェクト指向プログラミング技法を活用
3. 保守と再利用が可能な設計を追求する
	* 処理の最適なオブジェクト指向アプリケーションが完成したら、パターンと原則を適用して、ソフトウェアが今後数年間使用可能である状態にする

###カプセル化
アプリケーションを論理的な部分に分割して、それぞれを別々に扱えるようにすること。  
結成を改善できる箇所を探すのは、カプセル化から行う。継承やポリモーフィズムは、どちらもコードの重複とカプセル化に関するため、カプセル化から行うと良い。  
  
オブジェクトで何ができるかの仕様を、オブジェクトがその目標を達成ｓるうために行う実際の実装から、分離することである  
  
1. カプセル化により、アプリケーションの各部分の内部動作は隠蔽されるが、各部分の実行内容は明確になる！
2. 目的の１つは、アプリケーションの一部にある情報を、他の部分から保護すること。
3. クラスから振る舞いを分離すれば、クラスを変更しなくても、振る舞いを変更することが可能。
4. 一般的に、アプリケーション内で変動する部分を、同じ状態にとどまり続ける他の部分と分離して、カプセル化すべき。

###委譲
あるオブジェクトが、操作を他のオブジェクトに転送し、代わりに実行してもらう行為。  
委譲により、コードの再利用が容易になる。あるオブジェクトの振る舞いを処理するコードがアプリケーション全体に広まってしまうことがなくなり、オブジェクトは自分の機能だけを処理すれば良くなります。  
(例)equals()メソッドが一般的な例  
  
委譲により各オブジェクトは等価性（あるいはその他の仕事）を自分で処理するようになります。つまり、オブジェクト間の独立性が増し、疎結合(※)となる。  
疎結合のオブジェクトは、他のオブジェクトのコードと強く結合していないので、別のアプリケーションにおいて容易に再利用することが出来る。  
※疎結合：アプリケーション内のオブジェクトが自分の仕事だけに専念している状態。機能は、良く設計された多くのオブジェクトによって実現されるが、各オブジェクトは１つの仕事だけを的確に行う。  
なぜそれが良いのか？  
→疎結合のアプリケーションは、通常柔軟で、変更が容易である。各オブジェクトは、他のオブジェクトからかなり独立しているので、別のオブジェクトの振る舞いを変更することができる。
その結果、新しいフィーチャや機能の追加がはるかに容易になる。  



