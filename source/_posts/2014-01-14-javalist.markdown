---
layout: post
title: "javaのListやHashMapの拡張forとIterator"
date: 2014-01-14 23:52
comments: true
categories: ["java","memo"]
---
なんか久々に触ってたらListやHashmapのiterationを忘れてしまうので、メモ。  
<!-- more -->
```
HashMap<String,String> map = new HashMap<String,String>();
map.put("キー1", "キー1の値");
map.put("キー2", "キー2の値");
map.put("キー2", "キー3の値");

if (map.containsKey("キー1")){
  System.out.println("キー1=" + map.get("キー1"));
}else{
  System.out.println("指定したキーは存在しません");
}

//拡張for文（for-each)でループ
for(Map.Entry<String, String> e : map.entrySet()) {
    System.out.println(e.getKey() + " : " + e.getValue());
}

//Iteratorでループ
for (Iterator<Map.Entry<String, String>> it = map.entrySet().iterator(); it.hasNext(); ) {
    // entryを取得
    Map.Entry<String, String> entry = it.next();
    // キーを取得
    String key = entry.getKey();
    // 値を取得
    String val = entry.getValue();
    System.out.println(key + " : " + val);
}
```
  
  
ついでにHibernateの結果をListでグリグリ。  

```
public static void testHqlNewList(Session sess) {  
        String hql = "select new list('Hello', 100, f.id, f.name) from Father f where f.name like 'f%'";  
          
        Query query = sess.createQuery(hql);  
        List <List> listList = query.list();  
          
        for (List list: listList) {  
            System.out.println("==========");  
              
            for (int i=0; i<list.size(); i++) {  
                System.out.println(String.valueOf(i) + " : " + list.get(i));  
            }  
        }  
}
```

◇実行ログ
```
Hibernate: select 'Hello' as col_0_0_, 100 as col_1_0_, father0_.ID as col_2_0_, father0_.NAME as col_3_0_ from FATHER father0_ where father0_.NAME like 'f%'
==========  
0 : Hello  
1 : 100  
2 : 1  
3 : f01  
==========  
0 : Hello  
1 : 100  
2 : 2  
3 : f02  
```

Object型のListでガリガリ。  
  
```
クエリ省略
List <Object []> objsList = (List <Object []>) query.list();
for (Object [] objs:test) {
	System.out.println("========");
	System.out.println(objs[0].toString());  
	System.out.println(objs[1].toString());
	System.out.println(objs[2].toString());
}
```
  