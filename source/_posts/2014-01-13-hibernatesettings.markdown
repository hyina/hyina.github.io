---
layout: post
title: "hibernateの設定周り＋α"
date: 2014-01-13 20:26
comments: true
categories: hibernate
---
###Hibernateの設定
最低こんくらいあれば動くと思う。  

```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
                                         "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory name="">
		<!-- session contextの設定 -->
		<property name="current_session_context_class">thread</property>
		<!-- DBのドライバ -->
		<property name="hibernate.connection.driver_class">org.gjt.mm.mysql.Driver</property>
		<property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
		<!-- DBのユーザ・パスワード -->
		<property name="hibernate.connection.username">　</property>
		<property name="hibernate.connection.password">　</property>
		<!-- 接続するDBのURL -->
		<property name="hibernate.connection.url">jdbc:mysql://localhost:3306/〜</property>
		<!-- コネクションプールの設定 -->
		<property name="hibernate.connection.pool_size">3</property>
		<!-- 実行SQLをコンソールに表示するか（true:表示、false:非表示） -->
		<property name="hibernate.show_sql">true</property>
		<!-- マッピングファイルの定義 -->
		<!-- hibernateのxmlで管理する場合 -->
		<mapping resource="src以下のディレクトリ/〜/〜.hbm.xml" />
		<!-- アノテーションで管理する場合 -->
		<mapping class="パッケージ名.パッケージ名.クラス名" />
	</session-factory>
</hibernate-configuration>
```
<!-- more -->
###Hibernateのセッション
[ここを参考](http://www.yefisys.com/blog/2013/05/05/hibernate-will-be-no-backward-compat/)
buildServiceRegistry()が見つからないらしいので、build()に変更。  

```
	private final SessionFactory sessionFactory = getSessionFactory();
	private static ServiceRegistry serviceRegistry;
	
	protected SessionFactory getSessionFactory() {
		try {
			//デフォルトで作成されるやつ
//			return (SessionFactory) new InitialContext()
//					.lookup("SessionFactory");
			
			//3とかで使える。5以降では削除される予定らしい。
//			return new Configuration().configure().buildSessionFactory();
		    
			// Hibernateの初期化処理（Sessionオブジェクトの取得）
			// ※ Hibernate 4.0以降
			Configuration config = new Configuration().configure();
			serviceRegistry = new ServiceRegistryBuilder().applySettings(config.getProperties()).build();
			return config.buildSessionFactory(serviceRegistry);
		} catch (Exception e) {
			throw new IllegalStateException(
					"Could not locate SessionFactory in JNDI");
		}
	}

	private Session getSession() {
		return  sessionFactory.openSession();
	}
```

Hinerbate Toolsで作成したDAOについて。テーブル名+HOMEで作成される。  
どうやらこのままだと使えないっぽい。なんかめんｄ(ry  
daoSupportクラス。  

```
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.service.ServiceRegistryBuilder;

/**
 * Dao を補助するクラス
 */
public abstract class daoSupport {
	private static SessionFactory factory;
	private static ServiceRegistry serviceRegistry;
	
	protected Session getSession() {
		try {
			Configuration configuration = new Configuration();
		    return configuration.configure().buildSessionFactory().openSession();
		} catch (Exception e) {
			throw new IllegalStateException(
					"Could not locate SessionFactory in JNDI");
		}
	}
}
```
  
daoSupportクラスを継承して、daoを作成。  
複合主キーの１部を使用して検索し、結果をListで返すだけ。  

テスト用なので、下記な感じです。

1. id	PK
2. userid	PK
3. name
  

```
import java.util.List;

import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

public class daoTest extends daoSupport {
	@SuppressWarnings("unchecked")
	public List<Test> findByUserId(String userId) {
		try {
			Session s = getSession();
			try {
				List<Test> results = (List<Test>) s.createCriteria(Test.class)　//←Entityクラスを指定
						.add( Restrictions.eq("id.userid", userId) )	//useridに一致する。カラム名はhibernateの関連付けで定義した名前
//						.add( Restrictions.like("name", "てすと%"))	//like検索
//						.add( Restrictions.between("id.id",new Integer(1), new Integer(4)))		//between検索。第２引数が開始、第３引数が終了
						.list();
				return results;
			} finally {
				s.close();
			}
		} catch (RuntimeException re) {
			throw re;
		}
	}
}
```
  
以下エンティティ。  
  
Test.java
```
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

/**
 * Test generated by hbm2java
 */
@Entity
@Table(name = "test", catalog = "todoSample")
public class Test implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private TestId id;
	private String name;

	public Test() {
	}

	public Test(TestId id) {
		this.id = id;
	}

	public Test(TestId id, String name) {
		this.id = id;
		this.name = name;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "id", column = @Column(name = "id", nullable = false)),
			@AttributeOverride(name = "userid", column = @Column(name = "userid", nullable = false, length = 45)) })
	public TestId getId() {
		return this.id;
	}

	public void setId(TestId id) {
		this.id = id;
	}

	@Column(name = "name", length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}
	public String toString() {
		return ToStringBuilder.reflectionToString(this,
                ToStringStyle.SHORT_PREFIX_STYLE);
	}
}
```
  
TestId.java(複合主キー)  

```
package test.dao;

// Generated 2014/01/13 23:47:05 by Hibernate Tools 4.0.0

import javax.persistence.Column;
import javax.persistence.Embeddable;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

/**
 * TestId generated by hbm2java
 */
@Embeddable
public class TestId implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int id;
	private String userid;

	public TestId() {
	}

	public TestId(int id, String userid) {
		this.id = id;
		this.userid = userid;
	}

	@Column(name = "id", nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "userid", nullable = false, length = 45)
	public String getUserid() {
		return this.userid;
	}

	public void setUserid(String userid) {
		this.userid = userid;
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof TestId))
			return false;
		TestId castOther = (TestId) other;

		return (this.getId() == castOther.getId())
				&& ((this.getUserid() == castOther.getUserid()) || (this
						.getUserid() != null && castOther.getUserid() != null && this
						.getUserid().equals(castOther.getUserid())));
	}

	public int hashCode() {
		int result = 17;

		result = 37 * result + this.getId();
		result = 37 * result
				+ (getUserid() == null ? 0 : this.getUserid().hashCode());
		return result;
	}

	public String toString() {
		return ToStringBuilder.reflectionToString(this,
                ToStringStyle.SHORT_PREFIX_STYLE);
	}
}
```




