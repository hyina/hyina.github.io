<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Hyinaのブログヾ(o・ω・o)ﾉ]]></title>
  <link href="http://hyina.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://hyina.github.io/"/>
  <updated>2014-01-16T22:43:52+09:00</updated>
  <id>http://hyina.github.io/</id>
  <author>
    <name><![CDATA[hyina]]></name>
    <email><![CDATA[muffin.nov20@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javaDateAndSubstring]]></title>
    <link href="http://hyina.github.io/blog/2014/01/16/javadateandsubstring/"/>
    <updated>2014-01-16T22:12:00+09:00</updated>
    <id>http://hyina.github.io/blog/2014/01/16/javadateandsubstring</id>
    <content type="html"><![CDATA[<p>substringの使い方と月末日の取得方法！</p>

<!-- more -->


<h3>substringの使い方</h3>

<p>使い方はこんな感じ。</p>

<h2>```</h2>

<h2>substring</h2>

<p>public String substring(int beginIndex, int endIndex)
この文字列の部分文字列である新しい文字列を返す。<br/>
部分文字列は、指定された beginIndex から始まり、インデックス endIndex &ndash; 1 にある文字まで。<br/>
したがって、部分文字列の長さはendIndex-beginIndex になる。</p>

<p>パラメータ:
  beginIndex &ndash; 開始インデックス (この値を含む。スタートは0から。)
  endIndex &ndash; 終了インデックス (この値を含まない)
戻り値:
  指定された部分文字列
例外:
  IndexOutOfBoundsException &ndash; beginIndex が負の値である場合、endIndexが
  この String オブジェクトの長さより大きい場合、あるいはbeginIndex が endIndex より大きい場合
```</p>

<p>コードと実行結果。</p>

<p>```
class test{
  public static void main(String args[]){</p>

<pre><code>    String str1 = new String("123456789");
    //3文字目から5文字目まで取得
    String str1Substring = str1.substring(2, 5);

    System.out.println("「" + str1 + "」のsubstring(2,5)は「" + str1Substring + "」です");

    String str2 = new String("これはテストです");
    //1文字目から4文字目まで取得
    String str2Substring = str2.substring(0, 4);

    System.out.println("「" + str2 + "」のsubstring(0,4)は「" + str2Substring + "」です");
</code></pre>

<p>  }
}
&mdash;-実行結果&mdash;&ndash;
「123456789」のsubstring(2,5)は「345」です
「これはテストです」のsubstring(0,4)は「これはテ」です
```</p>

<h3>年月日から月の月末日を取得</h3>

<p>コードと実行結果</p>

<p>```
import java.util.Calendar;</p>

<p>public class Test {</p>

<pre><code>public static void main(String[] args) {
    String str1 = "2014/01/01";
    String str2 = "2014/02/01";//notうるう年
    String str3 = "2016/02/11";//うるう年
    System.out.println(str1 + " の月末日は " +getLastDay(str1));
    System.out.println(str2 + " の月末日は " +getLastDay(str2));
    System.out.println(str3 + " の月末日は " +getLastDay(str3));
}
/**
 * 指定した日付文字列（yyyy/MM/dd or yyyy-MM-dd）の月末日を返却する
 * @param strDate 対象の日付文字列
 * @return 月末日付
 */
public static int getLastDay(String strDate) {
    if (strDate == null || strDate.length() != 10) {
        throw new IllegalArgumentException("strDate：["+ strDate +"]" + "からは日付を取得できません!");
    }

    int yyyy = Integer.parseInt(strDate.substring(0,4));//年取得
    int MM = Integer.parseInt(strDate.substring(5,7));//月取得
    int dd = Integer.parseInt(strDate.substring(8,10));//日取得
    Calendar cal = Calendar.getInstance();
    cal.set(yyyy,MM-1,dd);
    int last = cal.getActualMaximum(Calendar.DATE);
    return last;
}
</code></pre>

<p>}
&mdash;-実行結果&mdash;&ndash;
2014/01/01 の月末日は 31
2014/02/01 の月末日は 28
2016/02/11 の月末日は 29
```</p>

<p>monthから1減算しているのは、下記の通り月の始まりが0からなので。</p>

<h2>```</h2>

<h2>Calender.set</h2>

<p>public final void set(int year, int month, int date)
カレンダフィールド YEAR、MONTH、および DAY_OF_MONTH の値を設定します。他のカレンダフィール
ドの以前の値は保持されます。保持されないようにする場合は、最初に clear() を呼び出します。</p>

<p>パラメータ:
  year &ndash; YEAR カレンダフィールドの設定に使用する値
  month &ndash; MONTH カレンダフィールドの設定に使用する値。Month 値は 0 から始まる (1月 は 0 になる)
  date &ndash; DAY_OF_MONTH カレンダフィールドの設定に使用する値
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javautil]]></title>
    <link href="http://hyina.github.io/blog/2014/01/16/javautil/"/>
    <updated>2014-01-16T22:08:00+09:00</updated>
    <id>http://hyina.github.io/blog/2014/01/16/javautil</id>
    <content type="html"><![CDATA[<p>個人的にメモ
個人的メモのため、追記していく予定。</p>

<ol>
<li><a href="/blog/2014/01/14/javalist/">Listの拡張fro文とIterator</a></li>
<li><a href="/blog/2014/01/16/jjavadateandsubstring/">substringの使い方と月の末尾の取得</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javaのListやHashMapの拡張forとIterator]]></title>
    <link href="http://hyina.github.io/blog/2014/01/14/javalist/"/>
    <updated>2014-01-14T23:52:00+09:00</updated>
    <id>http://hyina.github.io/blog/2014/01/14/javalist</id>
    <content type="html"><![CDATA[<p>なんか久々に触ってたらListやHashmapのiterationを忘れてしまうので、メモ。</p>

<!-- more -->


<p>```
HashMap&lt;String,String> map = new HashMap&lt;String,String>();
map.put(&ldquo;キー1&rdquo;, &ldquo;キー1の値&rdquo;);
map.put(&ldquo;キー2&rdquo;, &ldquo;キー2の値&rdquo;);
map.put(&ldquo;キー2&rdquo;, &ldquo;キー3の値&rdquo;);</p>

<p>if (map.containsKey(&ldquo;キー1&rdquo;)){
  System.out.println(&ldquo;キー1=&rdquo; + map.get(&ldquo;キー1&rdquo;));
}else{
  System.out.println(&ldquo;指定したキーは存在しません&rdquo;);
}</p>

<p>//拡張for文（for-each)でループ
for(Map.Entry&lt;String, String> e : map.entrySet()) {</p>

<pre><code>System.out.println(e.getKey() + " : " + e.getValue());
</code></pre>

<p>}</p>

<p>//Iteratorでループ
for (Iterator&lt;Map.Entry&lt;String, String>> it = map.entrySet().iterator(); it.hasNext(); ) {</p>

<pre><code>// entryを取得
Map.Entry&lt;String, String&gt; entry = it.next();
// キーを取得
String key = entry.getKey();
// 値を取得
String val = entry.getValue();
System.out.println(key + " : " + val);
</code></pre>

<p>}
```</p>

<p>ついでにHibernateの結果をListでグリグリ。</p>

<p>```
public static void testHqlNewList(Session sess) {</p>

<pre><code>    String hql = "select new list('Hello', 100, f.id, f.name) from Father f where f.name like 'f%'";  

    Query query = sess.createQuery(hql);  
    List &lt;List&gt; listList = query.list();  

    for (List list: listList) {  
        System.out.println("==========");  

        for (int i=0; i&lt;list.size(); i++) {  
            System.out.println(String.valueOf(i) + " : " + list.get(i));  
        }  
    }  
</code></pre>

<p>}
```</p>

<p>◇実行ログ
```</p>

<h1>Hibernate: select &lsquo;Hello&rsquo; as col_0_0<em>, 100 as col_1_0</em>, father0<em>.ID as col_2_0</em>, father0<em>.NAME as col_3_0</em> from FATHER father0<em> where father0</em>.NAME like &lsquo;f%&rsquo;</h1>

<p>0 : Hello<br/>
1 : 100<br/>
2 : 1</p>

<h1>3 : f01  </h1>

<p>0 : Hello<br/>
1 : 100<br/>
2 : 2<br/>
3 : f02<br/>
```</p>

<p>Object型のListでガリガリ。</p>

<p>```
クエリ省略
List <Object []> objsList = (List <Object []>) query.list();
for (Object [] objs:test) {</p>

<pre><code>System.out.println("========");
System.out.println(objs[0].toString());  
System.out.println(objs[1].toString());
System.out.println(objs[2].toString());
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
