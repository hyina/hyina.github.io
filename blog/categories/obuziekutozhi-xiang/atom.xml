<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: オブジェクト指向 | Hyinaのブログヾ(o・ω・o)ﾉ]]></title>
  <link href="http://hyina.github.io/blog/categories/obuziekutozhi-xiang/atom.xml" rel="self"/>
  <link href="http://hyina.github.io/"/>
  <updated>2014-01-17T04:07:29+09:00</updated>
  <id>http://hyina.github.io/</id>
  <author>
    <name><![CDATA[hyina]]></name>
    <email><![CDATA[muffin.nov20@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HeadFirstオブジェクト指向分析設計を読んだ時のメモ]]></title>
    <link href="http://hyina.github.io/blog/2013/12/31/headfirst-object-oriented-analysis-and-design/"/>
    <updated>2013-12-31T15:01:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/12/31/headfirst-object-oriented-analysis-and-design</id>
    <content type="html"><![CDATA[<h2>Head First オブジェクト指向分析設計のメモ</h2>

<p>「Head First オブジェクト指向分析」を読んで理解出来ていなかったところや、大事そうなところをメモしていく。<br/>
今後のために…。</p>

<h2>オブジェクト指向分析設計とは</h2>

<p>実際にはコードに必要な処理を行わせること、そしてその設計をよくすることに特化したソフトウェア作成手法にすぎない。<br/>
つまり、柔軟で、変更が容易であり、保守と再利用が可能であるコードを作成するための方法。</p>

<!-- more -->


<h2>１章 よく設計されたアプリケーションは心を動かす</h2>

<h3>素晴らしいソフトウェアとは？</h3>

<ul>
<li>[オブジェクト指向のプログラマ]オブジェクト指向のコード。つまり、コードの重複がなく、各オブジェクトの振る舞いが的確に制御されている。設計が堅実かつ柔軟なので、拡張も容易。</li>
<li>[設計の達人]実証されたデザインパターンと原則が使用されたときに生じる。オブジェクト間の結合を疎に保ち、コードは拡張に開かれ、修正に閉じるようにする。コードの再利用が容易になり、アプリケーションの一部を何度も使い回せるから、すべてを作り直す必要がなくなる。</li>
<li>第一に顧客を満足させ、顧客が望む処理を実行する必要がある。第二に設計やコードが適切で、保守、再利用、拡張が容易である。</li>
</ul>


<h3>素晴らしいソフトウェアにするための３ステップ</h3>

<ol>
<li>処理をソフトウェアが実行するようにする

<ul>
<li>良い要件収集と分析が必要</li>
</ul>
</li>
<li>オブジェクト指向の基本原則を適用し、柔軟性を高める

<ul>
<li>重複するコードを見つけ取り除く。そして、良いオブジェクト指向プログラミング技法を活用</li>
</ul>
</li>
<li>保守と再利用が可能な設計を追求する

<ul>
<li>処理の最適なオブジェクト指向アプリケーションが完成したら、パターンと原則を適用して、ソフトウェアが今後数年間使用可能である状態にする</li>
</ul>
</li>
</ol>


<h3>カプセル化</h3>

<p>アプリケーションを論理的な部分に分割して、それぞれを別々に扱えるようにすること。<br/>
結成を改善できる箇所を探すのは、カプセル化から行う。継承やポリモーフィズムは、どちらもコードの重複とカプセル化に関するため、カプセル化から行うと良い。</p>

<p>オブジェクトで何ができるかの仕様を、オブジェクトがその目標を達成ｓるうために行う実際の実装から、分離することである</p>

<ol>
<li>カプセル化により、アプリケーションの各部分の内部動作は隠蔽されるが、各部分の実行内容は明確になる！</li>
<li>目的の１つは、アプリケーションの一部にある情報を、他の部分から保護すること。</li>
<li>クラスから振る舞いを分離すれば、クラスを変更しなくても、振る舞いを変更することが可能。</li>
<li>一般的に、アプリケーション内で変動する部分を、同じ状態にとどまり続ける他の部分と分離して、カプセル化すべき。</li>
</ol>


<h3>委譲</h3>

<p>あるオブジェクトが、操作を他のオブジェクトに転送し、代わりに実行してもらう行為。<br/>
委譲により、コードの再利用が容易になる。あるオブジェクトの振る舞いを処理するコードがアプリケーション全体に広まってしまうことがなくなり、オブジェクトは自分の機能だけを処理すれば良くなります。<br/>
(例)equals()メソッドが一般的な例</p>

<p>委譲により各オブジェクトは等価性（あるいはその他の仕事）を自分で処理するようになります。つまり、オブジェクト間の独立性が増し、疎結合(※)となる。<br/>
疎結合のオブジェクトは、他のオブジェクトのコードと強く結合していないので、別のアプリケーションにおいて容易に再利用することが出来る。<br/>
※疎結合：アプリケーション内のオブジェクトが自分の仕事だけに専念している状態。機能は、良く設計された多くのオブジェクトによって実現されるが、各オブジェクトは１つの仕事だけを的確に行う。<br/>
なぜそれが良いのか？<br/>
→疎結合のアプリケーションは、通常柔軟で、変更が容易である。各オブジェクトは、他のオブジェクトからかなり独立しているので、別のオブジェクトの振る舞いを変更することができる。
その結果、新しいフィーチャや機能の追加がはるかに容易になる。</p>
]]></content>
  </entry>
  
</feed>
