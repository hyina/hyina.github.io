<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hibernate | Hyinaのブログヾ(o・ω・o)ﾉ]]></title>
  <link href="http://hyina.github.io/blog/categories/hibernate/atom.xml" rel="self"/>
  <link href="http://hyina.github.io/"/>
  <updated>2014-01-14T00:45:25+09:00</updated>
  <id>http://hyina.github.io/</id>
  <author>
    <name><![CDATA[hyina]]></name>
    <email><![CDATA[muffin.nov20@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hibernateの設定周り＋α]]></title>
    <link href="http://hyina.github.io/blog/2014/01/13/hibernatesettings/"/>
    <updated>2014-01-13T20:26:00+09:00</updated>
    <id>http://hyina.github.io/blog/2014/01/13/hibernatesettings</id>
    <content type="html"><![CDATA[<h3>Hibernateの設定</h3>

<p>最低こんくらいあれば動くと思う。</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;!DOCTYPE hibernate-configuration PUBLIC &ldquo;&ndash;//Hibernate/Hibernate Configuration DTD 3.0//EN&rdquo;</p>

<pre><code>                                     "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;
</code></pre>

<p>&lt;hibernate-configuration></p>

<pre><code>&lt;session-factory name=""&gt;
    &lt;!-- session contextの設定 --&gt;
    &lt;property name="current_session_context_class"&gt;thread&lt;/property&gt;
    &lt;!-- DBのドライバ --&gt;
    &lt;property name="hibernate.connection.driver_class"&gt;org.gjt.mm.mysql.Driver&lt;/property&gt;
    &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
    &lt;!-- DBのユーザ・パスワード --&gt;
    &lt;property name="hibernate.connection.username"&gt;　&lt;/property&gt;
    &lt;property name="hibernate.connection.password"&gt;　&lt;/property&gt;
    &lt;!-- 接続するDBのURL --&gt;
    &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://localhost:3306/〜&lt;/property&gt;
    &lt;!-- コネクションプールの設定 --&gt;
    &lt;property name="hibernate.connection.pool_size"&gt;3&lt;/property&gt;
    &lt;!-- 実行SQLをコンソールに表示するか（true:表示、false:非表示） --&gt;
    &lt;property name="hibernate.show_sql"&gt;true&lt;/property&gt;
    &lt;!-- マッピングファイルの定義 --&gt;
    &lt;!-- hibernateのxmlで管理する場合 --&gt;
    &lt;mapping resource="src以下のディレクトリ/〜/〜.hbm.xml" /&gt;
    &lt;!-- アノテーションで管理する場合 --&gt;
    &lt;mapping class="パッケージ名.パッケージ名.クラス名" /&gt;
&lt;/session-factory&gt;
</code></pre>

<p>&lt;/hibernate-configuration>
```</p>

<!-- more -->


<h3>Hibernateのセッション</h3>

<p><a href="http://www.yefisys.com/blog/2013/05/05/hibernate-will-be-no-backward-compat/">ここを参考</a>
buildServiceRegistry()が見つからないらしいので、build()に変更。</p>

<p>```</p>

<pre><code>private final SessionFactory sessionFactory = getSessionFactory();
private static ServiceRegistry serviceRegistry;

protected SessionFactory getSessionFactory() {
    try {
        //デフォルトで作成されるやつ
</code></pre>

<p>//          return (SessionFactory) new InitialContext()
//                  .lookup(&ldquo;SessionFactory&rdquo;);</p>

<pre><code>        //3とかで使える。5以降では削除される予定らしい。
</code></pre>

<p>//          return new Configuration().configure().buildSessionFactory();</p>

<pre><code>        // Hibernateの初期化処理（Sessionオブジェクトの取得）
        // ※ Hibernate 4.0以降
        Configuration config = new Configuration().configure();
        serviceRegistry = new ServiceRegistryBuilder().applySettings(config.getProperties()).build();
        return config.buildSessionFactory(serviceRegistry);
    } catch (Exception e) {
        throw new IllegalStateException(
                "Could not locate SessionFactory in JNDI");
    }
}

private Session getSession() {
    return  sessionFactory.openSession();
}
</code></pre>

<p>```</p>

<p>Hinerbate Toolsで作成したDAOについて。テーブル名+HOMEで作成される。<br/>
どうやらこのままだと使えないっぽい。なんかめんｄ(ry<br/>
daoSupportクラス。</p>

<p>```
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.service.ServiceRegistryBuilder;</p>

<p>/<em>*
 * Dao を補助するクラス
 </em>/
public abstract class daoSupport {</p>

<pre><code>private static SessionFactory factory;
private static ServiceRegistry serviceRegistry;

protected Session getSession() {
    try {
        Configuration configuration = new Configuration();
        return configuration.configure().buildSessionFactory().openSession();
    } catch (Exception e) {
        throw new IllegalStateException(
                "Could not locate SessionFactory in JNDI");
    }
}
</code></pre>

<p>}
```</p>

<p>daoSupportクラスを継承して、daoを作成。<br/>
複合主キーの１部を使用して検索し、結果をListで返すだけ。</p>

<p>テスト用なので、下記な感じです。</p>

<ol>
<li>id   PK</li>
<li>userid   PK</li>
<li>name</li>
</ol>


<p>```
import java.util.List;</p>

<p>import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;</p>

<p>public class daoTest extends daoSupport {</p>

<pre><code>@SuppressWarnings("unchecked")
public List&lt;Test&gt; findByUserId(String userId) {
    try {
        Session s = getSession();
        try {
            List&lt;Test&gt; results = (List&lt;Test&gt;) s.createCriteria(Test.class)　//←Entityクラスを指定
                    .add( Restrictions.eq("id.userid", userId) )    //useridに一致する。カラム名はhibernateの関連付けで定義した名前
</code></pre>

<p>//                      .add( Restrictions.like(&ldquo;name&rdquo;, &ldquo;てすと%&rdquo;))  //like検索
//                      .add( Restrictions.between(&ldquo;id.id&rdquo;,new Integer(1), new Integer(4)))     //between検索。第２引数が開始、第３引数が終了</p>

<pre><code>                    .list();
            return results;
        } finally {
            s.close();
        }
    } catch (RuntimeException re) {
        throw re;
    }
}
</code></pre>

<p>}
```</p>

<p>以下エンティティ。</p>

<p>Test.java
```
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;</p>

<p>import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;</p>

<p>/<em>*
 * Test generated by hbm2java
 </em>/
@Entity
@Table(name = &ldquo;test&rdquo;, catalog = &ldquo;todoSample&rdquo;)
public class Test implements java.io.Serializable {</p>

<pre><code>/**
 * 
 */
private static final long serialVersionUID = 1L;
private TestId id;
private String name;

public Test() {
}

public Test(TestId id) {
    this.id = id;
}

public Test(TestId id, String name) {
    this.id = id;
    this.name = name;
}

@EmbeddedId
@AttributeOverrides({
        @AttributeOverride(name = "id", column = @Column(name = "id", nullable = false)),
        @AttributeOverride(name = "userid", column = @Column(name = "userid", nullable = false, length = 45)) })
public TestId getId() {
    return this.id;
}

public void setId(TestId id) {
    this.id = id;
}

@Column(name = "name", length = 45)
public String getName() {
    return this.name;
}

public void setName(String name) {
    this.name = name;
}
public String toString() {
    return ToStringBuilder.reflectionToString(this,
            ToStringStyle.SHORT_PREFIX_STYLE);
}
</code></pre>

<p>}
```</p>

<p>TestId.java(複合主キー)</p>

<p>```
package test.dao;</p>

<p>// Generated 2014/01/13 23:47:05 by Hibernate Tools 4.0.0</p>

<p>import javax.persistence.Column;
import javax.persistence.Embeddable;</p>

<p>import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;</p>

<p>/<em>*
 * TestId generated by hbm2java
 </em>/
@Embeddable
public class TestId implements java.io.Serializable {</p>

<pre><code>/**
 * 
 */
private static final long serialVersionUID = 1L;
private int id;
private String userid;

public TestId() {
}

public TestId(int id, String userid) {
    this.id = id;
    this.userid = userid;
}

@Column(name = "id", nullable = false)
public int getId() {
    return this.id;
}

public void setId(int id) {
    this.id = id;
}

@Column(name = "userid", nullable = false, length = 45)
public String getUserid() {
    return this.userid;
}

public void setUserid(String userid) {
    this.userid = userid;
}

public boolean equals(Object other) {
    if ((this == other))
        return true;
    if ((other == null))
        return false;
    if (!(other instanceof TestId))
        return false;
    TestId castOther = (TestId) other;

    return (this.getId() == castOther.getId())
            &amp;&amp; ((this.getUserid() == castOther.getUserid()) || (this
                    .getUserid() != null &amp;&amp; castOther.getUserid() != null &amp;&amp; this
                    .getUserid().equals(castOther.getUserid())));
}

public int hashCode() {
    int result = 17;

    result = 37 * result + this.getId();
    result = 37 * result
            + (getUserid() == null ? 0 : this.getUserid().hashCode());
    return result;
}

public String toString() {
    return ToStringBuilder.reflectionToString(this,
            ToStringStyle.SHORT_PREFIX_STYLE);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
