<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memo | Hyinaのブログヾ(o・ω・o)ﾉ]]></title>
  <link href="http://hyina.github.io/blog/categories/memo/atom.xml" rel="self"/>
  <link href="http://hyina.github.io/"/>
  <updated>2014-03-12T21:30:55+09:00</updated>
  <id>http://hyina.github.io/</id>
  <author>
    <name><![CDATA[hyina]]></name>
    <email><![CDATA[muffin.nov20@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javaのsubstringの使い方と月末日の取得方法！]]></title>
    <link href="http://hyina.github.io/blog/2014/01/16/javadateandsubstring/"/>
    <updated>2014-01-16T22:12:00+09:00</updated>
    <id>http://hyina.github.io/blog/2014/01/16/javadateandsubstring</id>
    <content type="html"><![CDATA[<p>substringの使い方と月末日の取得方法！</p>

<!-- more -->


<h3>substringの使い方</h3>

<p>使い方はこんな感じ。</p>

<h2>```</h2>

<h2>substring</h2>

<p>public String substring(int beginIndex, int endIndex)
この文字列の部分文字列である新しい文字列を返す。<br/>
部分文字列は、指定された beginIndex から始まり、インデックス endIndex &ndash; 1 にある文字まで。<br/>
したがって、部分文字列の長さはendIndex-beginIndex になる。</p>

<p>パラメータ:
  beginIndex &ndash; 開始インデックス (この値を含む。スタートは0から。)
  endIndex &ndash; 終了インデックス (この値を含まない)
戻り値:
  指定された部分文字列
例外:
  IndexOutOfBoundsException &ndash; beginIndex が負の値である場合、endIndexが
  この String オブジェクトの長さより大きい場合、あるいはbeginIndex が endIndex より大きい場合
```</p>

<p>コードと実行結果。</p>

<p>```
class test{
  public static void main(String args[]){</p>

<pre><code>    String str1 = new String("123456789");
    //3文字目から5文字目まで取得
    String str1Substring = str1.substring(2, 5);

    System.out.println("「" + str1 + "」のsubstring(2,5)は「" + str1Substring + "」です");

    String str2 = new String("これはテストです");
    //1文字目から4文字目まで取得
    String str2Substring = str2.substring(0, 4);

    System.out.println("「" + str2 + "」のsubstring(0,4)は「" + str2Substring + "」です");
</code></pre>

<p>  }
}
&mdash;-実行結果&mdash;&ndash;
「123456789」のsubstring(2,5)は「345」です
「これはテストです」のsubstring(0,4)は「これはテ」です
```</p>

<h3>年月日から月の月末日を取得</h3>

<p>コードと実行結果</p>

<p>```
import java.util.Calendar;</p>

<p>public class Test {</p>

<pre><code>public static void main(String[] args) {
    String str1 = "2014/01/01";
    String str2 = "2014/02/01";//notうるう年
    String str3 = "2016/02/11";//うるう年
    System.out.println(str1 + " の月末日は " +getLastDay(str1));
    System.out.println(str2 + " の月末日は " +getLastDay(str2));
    System.out.println(str3 + " の月末日は " +getLastDay(str3));
}
/**
 * 指定した日付文字列（yyyy/MM/dd or yyyy-MM-dd）の月末日を返却する
 * @param strDate 対象の日付文字列
 * @return 月末日付
 */
public static int getLastDay(String strDate) {
    if (strDate == null || strDate.length() != 10) {
        throw new IllegalArgumentException("strDate：["+ strDate +"]" + "からは日付を取得できません!");
    }

    int yyyy = Integer.parseInt(strDate.substring(0,4));//年取得
    int MM = Integer.parseInt(strDate.substring(5,7));//月取得
    int dd = Integer.parseInt(strDate.substring(8,10));//日取得
    Calendar cal = Calendar.getInstance();
    cal.set(yyyy,MM-1,dd);
    int last = cal.getActualMaximum(Calendar.DATE);
    return last;
}
</code></pre>

<p>}
&mdash;-実行結果&mdash;&ndash;
2014/01/01 の月末日は 31
2014/02/01 の月末日は 28
2016/02/11 の月末日は 29
```</p>

<p>monthから1減算しているのは、下記の通り月の始まりが0からなので。</p>

<h2>```</h2>

<h2>Calender.set</h2>

<p>public final void set(int year, int month, int date)
カレンダフィールド YEAR、MONTH、および DAY_OF_MONTH の値を設定します。他のカレンダフィール
ドの以前の値は保持されます。保持されないようにする場合は、最初に clear() を呼び出します。</p>

<p>パラメータ:
  year &ndash; YEAR カレンダフィールドの設定に使用する値
  month &ndash; MONTH カレンダフィールドの設定に使用する値。Month 値は 0 から始まる (1月 は 0 になる)
  date &ndash; DAY_OF_MONTH カレンダフィールドの設定に使用する値
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javaのListやHashMapの拡張forとIterator]]></title>
    <link href="http://hyina.github.io/blog/2014/01/14/javalist/"/>
    <updated>2014-01-14T23:52:00+09:00</updated>
    <id>http://hyina.github.io/blog/2014/01/14/javalist</id>
    <content type="html"><![CDATA[<p>なんか久々に触ってたらListやHashmapのiterationを忘れてしまうので、メモ。</p>

<!-- more -->


<p>```
HashMap&lt;String,String> map = new HashMap&lt;String,String>();
map.put(&ldquo;キー1&rdquo;, &ldquo;キー1の値&rdquo;);
map.put(&ldquo;キー2&rdquo;, &ldquo;キー2の値&rdquo;);
map.put(&ldquo;キー2&rdquo;, &ldquo;キー3の値&rdquo;);</p>

<p>if (map.containsKey(&ldquo;キー1&rdquo;)){
  System.out.println(&ldquo;キー1=&rdquo; + map.get(&ldquo;キー1&rdquo;));
}else{
  System.out.println(&ldquo;指定したキーは存在しません&rdquo;);
}</p>

<p>//拡張for文（for-each)でループ
for(Map.Entry&lt;String, String> e : map.entrySet()) {</p>

<pre><code>System.out.println(e.getKey() + " : " + e.getValue());
</code></pre>

<p>}</p>

<p>//Iteratorでループ
for (Iterator&lt;Map.Entry&lt;String, String>> it = map.entrySet().iterator(); it.hasNext(); ) {</p>

<pre><code>// entryを取得
Map.Entry&lt;String, String&gt; entry = it.next();
// キーを取得
String key = entry.getKey();
// 値を取得
String val = entry.getValue();
System.out.println(key + " : " + val);
</code></pre>

<p>}
```</p>

<p>ついでにHibernateの結果をListでグリグリ。</p>

<p>```
public static void testHqlNewList(Session sess) {</p>

<pre><code>    String hql = "select new list('Hello', 100, f.id, f.name) from Father f where f.name like 'f%'";  

    Query query = sess.createQuery(hql);  
    List &lt;List&gt; listList = query.list();  

    for (List list: listList) {  
        System.out.println("==========");  

        for (int i=0; i&lt;list.size(); i++) {  
            System.out.println(String.valueOf(i) + " : " + list.get(i));  
        }  
    }  
</code></pre>

<p>}
```</p>

<p>◇実行ログ
```</p>

<h1>Hibernate: select &lsquo;Hello&rsquo; as col_0_0<em>, 100 as col_1_0</em>, father0<em>.ID as col_2_0</em>, father0<em>.NAME as col_3_0</em> from FATHER father0<em> where father0</em>.NAME like &lsquo;f%&rsquo;</h1>

<p>0 : Hello<br/>
1 : 100<br/>
2 : 1</p>

<h1>3 : f01  </h1>

<p>0 : Hello<br/>
1 : 100<br/>
2 : 2<br/>
3 : f02<br/>
```</p>

<p>Object型のListでガリガリ。</p>

<p>```
クエリ省略
List <Object []> objsList = (List <Object []>) query.list();
for (Object [] objs:test) {</p>

<pre><code>System.out.println("========");
System.out.println(objs[0].toString());  
System.out.println(objs[1].toString());
System.out.println(objs[2].toString());
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacAirが充電できない…]]></title>
    <link href="http://hyina.github.io/blog/2013/12/20/macair/"/>
    <updated>2013-12-20T23:57:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/12/20/macair</id>
    <content type="html"><![CDATA[<h2>寒さでMBAが凍える</h2>

<p>昨日から一気に冷えてきて、朝がツライ今日このごろ。<br/>
去年はそうでもなかったのに、最近愛用MacBookAirが充電出来ないことが多くなってきた。</p>

<p>2011モデルなので、最初はぶっ壊れたかと思ったが、調べてみると寒いと充電出来ないことよくあるらしい。<br/>
というわけで、その時の対処方法メモを書いておく。<br/>
主に自分のために(・∀・)</p>

<!-- more -->


<h3>部屋を暖める</h3>

<p>もうこれに尽きる！<br/>
といっても部屋がすぐに温まるわけでもない。。。<br/>
雰囲気的に、MBA本体よりMagsafe充電アダプタ本体を手とかこたつで温めると案外すぐに充電出来るようになる。<br/>
MBAのバッテリー、充電アダプタは両方動作温度は10~35℃なんだってさ。<br/>
自分のはこれでもいいけど、調べてたら他にも方法があるらしい。</p>

<h3>Magsafe充電アダプタを外して再接続する</h3>

<p>充電器をコンセントとMBAから外して1分以上待ってから再度接続する。<br/>
オンラインヘルプでも普通に出てくるらしい。<br/>
・・・効くのか？</p>

<h3>SMCをリセットする</h3>

<p>SMC=システム管理コントローラ<br/>
MBAのバッテリーや充電の電源管理は、SMCってとこがやっているらしいです。<br/>
このSMCが異常を起こして電源アダプタを正常に認識出来ていない（可能性）があって充電出来ないことがある・・・らしい。<br/>
方法は下記の通り。</p>

<ol>
<li>電源切る</li>
<li>電源コードを差し込む</li>
<li>Shift+Control+optionを押しながら電源ボタンを押す</li>
<li>全部のキーを離す→成功すると、電源アダプタが点灯する</li>
<li>電源ボタンオン！！</li>
</ol>


<p>いじょー</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressはじめました]]></title>
    <link href="http://hyina.github.io/blog/2013/10/04/start-octopress/"/>
    <updated>2013-10-04T20:38:00+09:00</updated>
    <id>http://hyina.github.io/blog/2013/10/04/start-octopress</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>個人的なoctpressをはじめるためのメモ書きです。</p>

<h3>個人的環境</h3>

<hr />

<ul>
<li>Mac OS X Lion</li>
<li>ruby 2.0.0p247</li>
<li>git 1.8.4</li>
</ul>


<!-- more -->


<h3>導入</h3>

<hr />

<p><a href="http://octopress.org/docs/setup/">公式サイト</a>を見てコマンド実行するだけ。
rubyのバージョンは1.9.3以上が必要なので注意。
<code>.rbenv-version</code>ってファイルをイジると問題ないような気もする。やってないけど(笑´∀｀)<br/>
あとは、いつからか、githubのリポジトリをusername.github.com から username.github.io とするようになっているみたい。</p>

<p>デフォルトのテーマのままっていうのもあれなので、<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">サードパーティー制のテーマ</a>から、bootstrap-themeを適用しました。<br/>
下記のコマンドを実行でOK。テーマを適用するとサイドバーとかの修正した分の一部が初期化されるので、テーマを適用してからイジると良いかと思います。</p>

<p><code>
cd octopress
git clone https://github.com/bkutil/bootstrap-theme .themes/bootstrap
rake install['bootstrap']
rake generate
</code></p>

<h3>ブログの設定</h3>

<hr />

<p><em>config.ymlの編集すると、ブログタイトルなどは</em>config.ymlで設定できます。<br/>
titleやauthor等を編集すると、ヘッダーやフッターが自動的に変わってくれます。<br/>
内容については、ググるなり、<a href="http://octopress.org/docs/configuring/">公式サイト</a>を見ると色々書いてありますが、下記くらいは修正しておくと良いかと思います。</p>

<p><code>
url: http://yoursite.com
title: My Octopress Blog
subtitle: A blogging framework for hackers.
author: Yout Name
simple_search: http://google.com/search
description:
date_format: "%Y-%m-%d"
excerpt_link: "続きを読む"
</code></p>

<p>あと、ブログなのにコメント欄がないというのもあれなので、ブログのコメントサービス<a href="http://disqus.com/">Disqus</a>を設定しときます。<br/>
Disqusでユーザ登録する際に、ユーザIDを設定できます、それを、<code>_config.yml</code>に追記します。<br/>
```</p>

<h1>Dispus account</h1>

<p>disqus_short_name: USER_ID
disqus_show_comment_count: false
<code>``
すると、</code>source/_include/disqus.html`によってdisqus用のコードを生成してくれます。</p>

<h3>プレビュー</h3>

<hr />

<p>ここらで一度、どんな感じになっているか確認してみます。<br/>
プレビューを行うには、下記のコマンドを実行後、<a href="http://localhost:4000">localhost:4000</a>にアクセスします。</p>

<p><code>
$ rake preview
</code><br/>
プレビューを終了するには、ctrl+cでｗ</p>

<h3>デプロイ</h3>

<hr />

<p>OctopressをGithub Pagesにデプロイするための設定をします。</p>

<p><code>
rake setup_github_pages
</code><br/>
コマンドを叩くと、Github PagesのリポジトリのURLを入力してねと出るので、
リポジトリのURLを入力しましょう。</p>

<p>入力したら、下記コマンドを入力するとデプロイできます。しばらくすると、<code>http://username.github.io</code>にブログができあがります。反映には5〜10分くらいかかるみたいです。</p>

<p><code>
rake gen_deploy
</code></p>

<h3>記事の作成</h3>

<hr />

<p>記事を作成するには、下記のコマンドを実行し、テンプレートを作成します。<br/>
post titleは、実際のURLになるので、注意。</p>

<p><code>
rake new_post['post title']
</code>
テンプレートは、<code>source/_posts/</code>以下に出来るので、お好みのエディタで編集します。</p>

<h2>```</h2>

<p>layout: post
title: &ldquo;ここにタイトルを記入&rdquo;
date: 作成日が入っています。
comments: コメント欄を出す場合は、trueに。</p>

<h2>categories: &ldquo;タグ"（複数入れる場合は、["タグ１&rdquo;,&ldquo;タグ２&rdquo;]みたいにする）</h2>

<p>記事を書く。
下記を入れておくと、トップページではmore以下が省略され、続きを読むリンクが表示されます。
リンク文字列は、_config.yml の excerpt_link で変更可能です。</p>

<h1>上の内容までがトップページに表示</h1>

<!-- more -->


<h1>下の内容が個別の記事のページに表示</h1>

<p>```</p>

<p>Markdownで書いたものをリアルプレビューできるMouが有名みたいですが、僕は、Sublime Text 2で書いています。意味は特にないですｗ</p>

<h3>Sublime Text 2でMarkdownのプレビューをする</h3>

<hr />

<p>需要があるかは不明ですが、忘却メモということで(・∀・)<br/>
1. Ctrl + Shift + p<br/>
2. Package Controll:Install Packages</p>

<p>その後、「Markdown Preview」をインストールしたら使えます。<br/>
<a href="https://github.com/revolunet/sublimetext-markdown-preview#usage-">ここ</a>に使い方は書いてあるけど、Markdownのファイルを開いた状態で、</p>

<ol>
<li>Ctrl+Shift+p</li>
<li>Markdown Preview : preview in Browser</li>
</ol>


<p>と実行すると、ブラウザで開かれてプレビューを見ることができます。
<code>/var/folders/</code>にファイルが作成されてるみたい…勝手に削除されるのかな？</p>

<h3>htmlファイル生成</h3>

<hr />

<p>下記のコマンドを実行すると、htmlファイルが生成されます。<br/>
<code>
rake generate
</code>
そのあとは、プレビューで確認して、最終確認をします。</p>

<h3>記事の投稿</h3>

<hr />

<p>プレビューで公開をしても問題ないとなったら、下記のコマンドを実行してデプロイします。<br/>
<code>
rake deploy
</code></p>

<p>ちなみに、html生成＋デプロイは、下記のコマンド１行でいけます。</p>

<p><code>
rake gen_deloy
</code></p>

<p>あと、記事の削除は、<code>source/_posts/〜.markdown</code>を削除し、html生成+デプロイをすると、ブログからは消え去ります。</p>

<h3>サイト運用</h3>

<p>ユーザーページ、プロジェクトページのそれぞれで、本体のリポジトリと統合する方法が推奨されているみたい。<br/>
ここ参考。<a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></p>

<p>ユーザーページ用リポジトリへの push</p>

<p><code>
$ git add .
$ git commit -m 'コミットメモ'
$ git push origin source
</code></p>

<p>プロジェクトページ用リポジトリへの push</p>

<p><code>
$ git remote add origin (your repo url)
$ git config branch.master.remote origin # set your new origin as the default branch
$ git push origin source
</code></p>

<h3>感想</h3>

<hr />

<p>rubyを触ったことないからインストールから始めたので意外と時間はかかっちゃいました。あとは、テーマやらサイドバーとかの修正で手間取ったりorz<br/>
とりあえず、markdownでブログを書けるのはかなり楽なのでやって損はないと思います。<br/>
問題は、ブログを書き続ける継続力があるかどうか・・・かな(；・∀・)←</p>
]]></content>
  </entry>
  
</feed>
